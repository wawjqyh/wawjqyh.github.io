(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["docs/String/charAt"],{WbmY:function(t,r){var e='<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank">\u539f\u6587\u94fe\u63a5</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank">en</a></p> <h1 id="stringprototypecharat">String.prototype.charAt()</h1> <h2 id="\u6982\u8ff0">\u6982\u8ff0</h2> <p>charAt() \u65b9\u6cd5\u4ece\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u8fd4\u56de\u6307\u5b9a\u7684\u5b57\u7b26\u3002</p> <h2 id="\u8bed\u6cd5">\u8bed\u6cd5</h2> <pre><code class="language-javascript">str.charAt(index)</code></pre> <h3 id="\u53c2\u6570">\u53c2\u6570</h3> <ul> <li><code>index</code> \u4e00\u4e2a\u4ecb\u4e8e0 \u548c\u5b57\u7b26\u4e32\u957f\u5ea6\u51cf1\u4e4b\u95f4\u7684\u6574\u6570\uff0c (0~length-1)\uff0c\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u7d22\u5f15\uff0ccharAt() \u5c06\u4f7f\u75280</li> </ul> <h2 id="\u63cf\u8ff0">\u63cf\u8ff0</h2> <p>\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4ece\u5de6\u5411\u53f3\u7d22\u5f15\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\u503c\u4e3a 0\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff08\u5047\u8bbe\u8be5\u5b57\u7b26\u4f4d\u4e8e\u5b57\u7b26\u4e32 stringName \u4e2d\uff09\u7684\u7d22\u5f15\u503c\u4e3a stringName.length - 1\u3002 \u5982\u679c\u6307\u5b9a\u7684 index \u503c\u8d85\u51fa\u4e86\u8be5\u8303\u56f4\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002</p> <h2 id="\u793a\u4f8b">\u793a\u4f8b</h2> <h3 id="\u8f93\u51fa\u5b57\u7b26\u4e32\u4e2d\u4e0d\u540c\u4f4d\u7f6e\u7684\u5b57\u7b26">\u8f93\u51fa\u5b57\u7b26\u4e32\u4e2d\u4e0d\u540c\u4f4d\u7f6e\u7684\u5b57\u7b26</h3> <p>\u4e0b\u4f8b\u8f93\u51fa\u5b57\u7b26\u4e32 &quot;Brave new world&quot; \u4e0d\u540c\u4f4d\u7f6e\u5904\u7684\u5b57\u7b26\uff1a</p> <pre><code class="language-javascript">var anyString = &quot;Brave new world&quot;;\n\nconsole.log(&quot;The character at index 0   is &#39;&quot; + anyString.charAt(0)   + &quot;&#39;&quot;);\nconsole.log(&quot;The character at index 1   is &#39;&quot; + anyString.charAt(1)   + &quot;&#39;&quot;);\nconsole.log(&quot;The character at index 2   is &#39;&quot; + anyString.charAt(2)   + &quot;&#39;&quot;);\nconsole.log(&quot;The character at index 3   is &#39;&quot; + anyString.charAt(3)   + &quot;&#39;&quot;);\nconsole.log(&quot;The character at index 4   is &#39;&quot; + anyString.charAt(4)   + &quot;&#39;&quot;);\nconsole.log(&quot;The character at index 999 is &#39;&quot; + anyString.charAt(999) + &quot;&#39;&quot;);</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u7684\u8f93\u51fa\u4e3a\uff1a</p> <pre><code class="language-javascript">The character at index 0 is &#39;B&#39;\nThe character at index 1 is &#39;r&#39;\nThe character at index 2 is &#39;a&#39;\nThe character at index 3 is &#39;v&#39;\nThe character at index 4 is &#39;e&#39;\nThe character at index 999 is &#39;&#39;</code></pre> <h3 id="\u83b7\u53d6\u6240\u6709\u5b57\u7b26">\u83b7\u53d6\u6240\u6709\u5b57\u7b26</h3> <p>\u4ee5\u4e0b\u63d0\u4f9b\u4e86\u4e00\u79cd\u786e\u4fdd\u901a\u8fc7\u5b57\u7b26\u4e32\u5faa\u73af\u603b\u662f\u63d0\u4f9b\u6574\u4e2a\u5b57\u7b26\u7684\u65b9\u6cd5\uff0c\u5373\u4f7f\u8be5\u5b57\u7b26\u4e32\u5305\u542b\u4e0d\u5728\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762\uff08BMP\uff09\u4e2d\u7684\u5b57\u7b26\u3002</p> <pre><code class="language-javascript">var str = &#39;A \\uD87E\\uDC04 Z&#39;; // We could also use a non-BMP character directly\nfor (var i=0, chr; i &lt; str.length; i++) {\n  if ((chr = getWholeChar(str, i)) === false) {\n    continue;\n  } // Adapt this line at the top of each loop, passing in the whole string and\n    // the current iteration and returning a variable to represent the\n    // individual character\n\n  alert(chr);\n}\n\nfunction getWholeChar (str, i) {\n  var code = str.charCodeAt(i);\n\n  if (isNaN(code)) {\n    return &#39;&#39;; // Position not found\n  }\n  if (code &lt; 0xD800 || code &gt; 0xDFFF) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) {\n    if (str.length &lt;= (i+1))  {\n      throw &#39;High surrogate without following low surrogate&#39;;\n    }\n    var next = str.charCodeAt(i+1);\n      if (0xDC00 &gt; next || next &gt; 0xDFFF) {\n        throw &#39;High surrogate without following low surrogate&#39;;\n      }\n      return str.charAt(i)+str.charAt(i+1);\n  }\n  // Low surrogate (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF)\n  if (i === 0) {\n    throw &#39;Low surrogate without preceding high surrogate&#39;;\n  }\n  var prev = str.charCodeAt(i-1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xD800 &gt; prev || prev &gt; 0xDBFF) {\n    throw &#39;Low surrogate without preceding high surrogate&#39;;\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n}</code></pre> <p>\u5728\u5141\u8bb8\u89e3\u6784\u5206\u914d\u7684\u72ec\u5360JavaScript 1.7+\u73af\u5883\uff08\u5982Firefox\uff09\u4e2d\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u7b80\u6d01\u548c\u66f4\u7075\u6d3b\u7684\u66ff\u4ee3\u65b9\u6cd5\uff0c\u5b83\u4f1a\u81ea\u52a8\u9012\u589e\u4e00\u4e2a\u9012\u589e\u53d8\u91cf\uff08\u5982\u679c\u5b57\u7b26\u4fdd\u8bc1\u5b83\u662f\u4e00\u4e2a\u66ff\u4ee3\u5bf9\uff09\u3002</p> <pre><code class="language-javascript">var str = &#39;A\\uD87E\\uDC04Z&#39;; // We could also use a non-BMP character directly\nfor (var i=0, chr; i &lt; str.length; i++) {\n  [chr, i] = getWholeCharAndI(str, i);\n  // Adapt this line at the top of each loop, passing in the whole string and\n  // the current iteration and returning an array with the individual character\n  // and &#39;i&#39; value (only changed if a surrogate pair)\n\n  alert(chr);\n}\n\nfunction getWholeCharAndI (str, i) {\n  var code = str.charCodeAt(i);\n\n  if (isNaN(code)) {\n    return &#39;&#39;; // Position not found\n  }\n  if (code &lt; 0xD800 || code &gt; 0xDFFF) {\n    return [str.charAt(i), i]; // Normal character, keeping &#39;i&#39; the same\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) {\n    if (str.length &lt;= (i+1))  {\n      throw &#39;High surrogate without following low surrogate&#39;;\n    }\n    var next = str.charCodeAt(i+1);\n      if (0xDC00 &gt; next || next &gt; 0xDFFF) {\n        throw &#39;High surrogate without following low surrogate&#39;;\n      }\n      return [str.charAt(i)+str.charAt(i+1), i+1];\n  }\n  // Low surrogate (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF)\n  if (i === 0) {\n    throw &#39;Low surrogate without preceding high surrogate&#39;;\n  }\n  var prev = str.charCodeAt(i-1);\n\n  // (could change last hex to 0xDB7F to treat high private surrogates\n  // as single characters)\n  if (0xD800 &gt; prev || prev &gt; 0xDBFF) {\n    throw &#39;Low surrogate without preceding high surrogate&#39;;\n  }\n  // Return the next character instead (and increment)\n  return [str.charAt(i+1), i+1];\n}</code></pre> <h3 id="\u4fee\u590dcharat\u4ee5\u652f\u6301\u975e\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762\uff08bmp\uff09\u5b57\u7b26">\u4fee\u590dcharAt\u4ee5\u652f\u6301\u975e\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762\uff08BMP\uff09\u5b57\u7b26</h3> <p>\u867d\u7136\u4e0a\u9762\u7684\u4f8b\u5b50\u5bf9\u4e8e\u90a3\u4e9b\u5e0c\u671b\u652f\u6301\u975eBMP\u5b57\u7b26\u7684\u7528\u6237\u53ef\u80fd\u66f4\u6709\u7528\uff08\u56e0\u4e3a\u5b83\u4e0d\u8981\u6c42\u8c03\u7528\u8005\u77e5\u9053\u4efb\u4f55\u975eBMP\u5b57\u7b26\u53ef\u80fd\u51fa\u73b0\u5728\u54ea\u91cc\uff09\uff0c\u5728\u4eba\u4eec\u5e0c\u671b \u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u9009\u62e9\u5b57\u7b26 \u901a\u8fc7\u7d22\u5f15\uff0c\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u66ff\u4ee3\u5bf9\u4f5c\u4e3a\u5b83\u4eec\u8868\u793a\u7684\u5355\u4e2a\u5b57\u7b26\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\uff1a</p> <pre><code class="language-javascript">function fixedCharAt (str, idx) {\n  var ret = &#39;&#39;;\n  str += &#39;&#39;;\n  var end = str.length;\n\n  var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n  while ((surrogatePairs.exec(str)) != null) {\n    var li = surrogatePairs.lastIndex;\n    if (li - 2 &lt; idx) {\n      idx++;\n    } else {\n      break;\n    }\n  }\n\n  if (idx &gt;= end || idx &lt; 0) {\n    return &#39;&#39;;\n  }\n\n  ret += str.charAt(idx);\n\n  if (/[\\uD800-\\uDBFF]/.test(ret) &amp;&amp; /[\\uDC00-\\uDFFF]/.test(str.charAt(idx+1))) {\n    // Go one further, since one of the &quot;characters&quot; is part of a surrogate pair\n    ret += str.charAt(idx+1);\n  }\n  return ret;\n}</code></pre> <h2 id="\u89c4\u8303">\u89c4\u8303</h2> <table> <thead> <tr> <th align="left">Specification</th> <th align="left">Status</th> <th align="left">Comment</th> </tr> </thead> <tbody><tr> <td align="left">ECMAScript 1rd Edition (ECMA-262)</td> <td align="left">Standard</td> <td align="left">Initial definition</td> </tr> <tr> <td align="left">ECMAScript 5.1 (ECMA-262)</td> <td align="left">Standard</td> <td align="left"></td> </tr> <tr> <td align="left">ECMAScript 2015 (6th Edition, ECMA-262)</td> <td align="left">Standard</td> <td align="left"></td> </tr> </tbody></table> ';t.exports=e}}]);