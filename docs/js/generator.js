(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["docs/js/generator"],{rv4s:function(e,n,o){var r=o("Rxnk"),t=o("Hh6s"),a=r(t),l='<h1 id="generator---\u9ad8\u7ea7-iteration">Generator - \u9ad8\u7ea7 iteration</h1> <h2 id="1-generator">1 Generator</h2> <p><strong>Generator \u53ef\u4ee5\u505a\u4ec0\u4e48\uff1a</strong></p> <ol> <li><code>Generators</code> \u5141\u8bb8\u6211\u4eec\u5728\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\u6682\u505c\u3001\u5e76\u5728\u5c06\u6765\u67d0\u4e00\u65f6\u523b\u6062\u590d\u6267\u884c</li> <li>\u7b80\u5316\u8fed\u4ee3\u5668\u7684\u521b\u5efa</li> <li>\u7b80\u5316\u5f02\u6b65\u65b9\u6cd5\u7684\u5199\u6cd5</li> </ol> <h3 id="11-generator-\u51fd\u6570">1.1 Generator \u51fd\u6570</h3> <p>\u5e38\u89c4\u51fd\u6570\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5355\u4e00\u503c\uff08\u6216\u8005\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c\uff09\u3002</p> <p>\u800c <code>Generator</code> \u53ef\u4ee5\u6309\u9700\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u8fd4\u56de\uff08\u201cyield\u201d\uff09\u591a\u4e2a\u503c\u3002\u5b83\u4eec\u53ef\u4e0e <code>iterable</code> \u5b8c\u7f8e\u914d\u5408\u4f7f\u7528\uff0c\u4ece\u800c\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u6570\u636e\u6d41</p> <p>\u8981\u521b\u5efa\u4e00\u4e2a <code>generator</code>\uff0c\u9700\u8981\u4e00\u4e2a\u7279\u6b8a\u7684\u8bed\u6cd5\u7ed3\u6784\uff1a<code>function*</code>\uff0c\u5373 <code>Generator</code> \u51fd\u6570</p> <pre><code class="language-js">function* generateSequence() {\n  yield 1;\n  yield 2;\n  return 3;\n}\n\n// &quot;generator function&quot; \u521b\u5efa\u4e86\u4e00\u4e2a &quot;generator object&quot;\nlet generator = generateSequence();\nalert(generator); // [object Generator]</code></pre> <h3 id="12-generator-\u662f\u53ef\u8fed\u4ee3\u7684">1.2 Generator \u662f\u53ef\u8fed\u4ee3\u7684</h3> <p>generator \u662f\u53ef\u8fed\u4ee3\u7684:</p> <ul> <li>\u5b83\u5177\u6709 <code>.next()</code> \u65b9\u6cd5</li> <li>\u5b83\u4ee5 <code>{value: ..., done: true/false}</code> \u7684\u5f62\u5f0f\u8fd4\u56de\u503c</li> </ul> <pre><code class="language-js">function* generateSequence() {\n  yield 1;\n  yield 2;\n  return 3;\n}\n\nlet generator = generateSequence();\n\nfor (let value of generator) {\n  alert(value); // 1\uff0c\u7136\u540e\u662f 2\n}</code></pre> <p>\u56e0\u4e3a generator \u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 iterator \u7684\u6240\u6709\u76f8\u5173\u529f\u80fd\uff0c\u4f8b\u5982\uff1a<code>spread</code> \u8bed\u6cd5 <code>...</code></p> <pre><code class="language-js">function* generateSequence() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nlet sequence = [0, ...generateSequence()];\n\nalert(sequence); // 0, 1, 2, 3</code></pre> <h3 id="13-\u4f7f\u7528-generator-\u8fdb\u884c\u8fed\u4ee3">1.3 \u4f7f\u7528 generator \u8fdb\u884c\u8fed\u4ee3</h3> <p>\u4f7f\u7528\u666e\u901a\u51fd\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1a</p> <pre><code class="language-js">let range = {\n  from: 1,\n  to: 5,\n\n  // for..of range \u5728\u4e00\u5f00\u59cb\u5c31\u8c03\u7528\u4e00\u6b21\u8fd9\u4e2a\u65b9\u6cd5\n  [Symbol.iterator]() {\n    // ...\u5b83\u8fd4\u56de iterator object\uff1a\n    // \u540e\u7eed\u7684\u64cd\u4f5c\u4e2d\uff0cfor..of \u5c06\u53ea\u9488\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528 next() \u5411\u5b83\u8bf7\u6c42\u4e0b\u4e00\u4e2a\u503c\n    return {\n      current: this.from,\n      last: this.to,\n\n      // for..of \u5faa\u73af\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u90fd\u4f1a\u8c03\u7528 next()\n      next() {\n        // \u5b83\u5e94\u8be5\u4ee5\u5bf9\u8c61 {done:.., value :...} \u7684\u5f62\u5f0f\u8fd4\u56de\u503c\n        if (this.current &lt;= this.last) {\n          return { done: false, value: this.current++ };\n        } else {\n          return { done: true };\n        }\n      }\n    };\n  }\n};\n\n// \u8fed\u4ee3\u6574\u4e2a range \u5bf9\u8c61\uff0c\u8fd4\u56de\u4ece `range.from` \u5230 `range.to` \u8303\u56f4\u7684\u6240\u6709\u6570\u5b57\nalert([...range]); // 1,2,3,4,5</code></pre> <p>\u4f7f\u7528 <code>generator</code> \u51fd\u6570\u4f5c\u4e3a <code>Symbol.iterator</code> \u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1a</p> <pre><code class="language-js">let range = {\n  from: 1,\n  to: 5,\n\n  *[Symbol.iterator]() {\n    // [Symbol.iterator]: function*() \u7684\u7b80\u5199\u5f62\u5f0f\n    for (let value = this.from; value &lt;= this.to; value++) {\n      yield value;\n    }\n  }\n};\n\nalert([...range]); // 1,2,3,4,5</code></pre> <h3 id="14-generator-\u7ec4\u5408">1.4 Generator \u7ec4\u5408</h3> <pre><code class="language-js">function* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield &#39;a&#39;;\n  yield* g1();\n  yield &#39;b&#39;;\n}\n\nlet g = g2();\n// g.next \u8f93\u51fa a,1,2,b</code></pre> <p><code>yield*</code> \u6307\u4ee4\u5c06\u6267\u884c <code>\u59d4\u6258</code> \u7ed9\u53e6\u4e00\u4e2a <code>generator</code>\u3002\u8fd9\u4e2a\u672f\u8bed\u610f\u5473\u7740 <code>yield* gen</code> \u5728 <code>generator gen</code> \u4e0a\u8fdb\u884c\u8fed\u4ee3\uff0c\u5e76\u5c06\u5176\u4ea7\u51fa\uff08yield\uff09\u7684\u503c\u900f\u660e\u5730\uff08transparently\uff09\u8f6c\u53d1\u5230\u5916\u90e8\u3002\u5c31\u597d\u50cf\u8fd9\u4e9b\u503c\u5c31\u662f\u7531\u5916\u90e8\u7684 <code>generator yield</code> \u7684\u4e00\u6837</p> <h3 id="15-yield-\u63a5\u6536\u53c2\u6570">1.5 yield \u63a5\u6536\u53c2\u6570</h3> <p><code>yield</code> \u4e0d\u4ec5\u53ef\u4ee5\u5411\u5916\u8fd4\u56de\u7ed3\u679c\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5c06\u5916\u90e8\u7684\u503c\u4f20\u9012\u5230 <code>generator</code> \u5185</p> <blockquote> <p>\u7b2c\u4e8c\u4e2a <code>next</code> \u4f20\u7684\u53c2\u6570\u4f5c\u4e3a\u7b2c\u4e00\u4e2a <code>yield</code> \u7684\u7ed3\u679c\u4f20\u9012\u56de <code>generator</code></p> </blockquote> <pre><code class="language-js">function* gen() {\n  let ask1 = yield &#39;2 + 2 = ?&#39;;\n\n  alert(ask1); // 4\n\n  let ask2 = yield &#39;3 * 3 = ?&#39;;\n\n  alert(ask2); // 9\n}\n\nlet generator = gen();\n\nalert(generator.next().value); // &quot;2 + 2 = ?&quot;\n\nalert(generator.next(4).value); // &quot;3 * 3 = ?&quot;\n\nalert(generator.next(9).done); // true</code></pre> <p><img src="'+a+'" alt=""></p> <h2 id="2-\u5f02\u6b65\u8fed\u4ee3\u548c-generator">2 \u5f02\u6b65\u8fed\u4ee3\u548c generator</h2> <h3 id="21-\u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61">2.1 \u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61</h3> <p>\u5bf9\u8c61\u5f02\u6b65\u8fed\u4ee3\uff1a</p> <ul> <li>\u4f7f\u7528 <code>Symbol.asyncIterator</code> \u53d6\u4ee3 <code>Symbol.iterator</code></li> <li><code>next()</code> \u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a <code>promise</code>\uff08\u5e26\u6709\u4e0b\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u72b6\u6001\u4e3a <code>fulfilled</code>\uff09</li> <li>\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 <code>for await (let item of iterable)</code> \u5faa\u73af\u6765\u8fed\u4ee3\u8fd9\u6837\u7684\u5bf9\u8c61</li> </ul> <pre><code class="language-js">let range = {\n  from: 1,\n  to: 5,\n\n  [Symbol.asyncIterator]() {\n    // \u4e3a\u4e86\u4f7f\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5f02\u6b65\u8fed\u4ee3\uff0c\u5b83\u5fc5\u987b\u5177\u6709\u65b9\u6cd5 Symbol.asyncIterator\n    return {\n      current: this.from,\n      last: this.to,\n\n      async next() {\n        // \u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709 next() \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0cnext() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a promise\n\n        // \u6ce8\u610f\uff1a\u6211\u4eec\u53ef\u4ee5\u5728 async next \u5185\u90e8\u4f7f\u7528 &quot;await&quot;\n        // \u8fd9\u4e2a next() \u65b9\u6cd5\u53ef\u4ee5\u4e0d\u662f async \u7684\uff0c\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u8fd4\u56de\u503c\u662f\u4e00\u4e2a promise \u7684\u5e38\u89c4\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u4f7f\u7528\n        // async \u5173\u952e\u5b57\u53ef\u4ee5\u5141\u8bb8\u6211\u4eec\u5728\u65b9\u6cd5\u5185\u90e8\u4f7f\u7528 await\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u65b9\u4fbf\u3002\u8fd9\u91cc\u6211\u4eec\u53ea\u662f\u7528\u4e8e\u5ef6\u8fdf 1 \u79d2\u7684\u64cd\u4f5c\n        await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n        if (this.current &lt;= this.last) {\n          return { done: false, value: this.current++ };\n        } else {\n          return { done: true };\n        }\n      }\n    };\n  }\n};\n\n(async () =&gt; {\n  for await (let value of range) {\n    // \u6211\u4eec\u4f7f\u7528 for await(let value of range) \u6765\u8fdb\u884c\u8fed\u4ee3\uff0c\u4e5f\u5c31\u662f\u5728 for \u540e\u9762\u6dfb\u52a0 await\n    // \u5b83\u4f1a\u8c03\u7528\u4e00\u6b21range[Symbol.asyncIterator]() \u65b9\u6cd5\u4e00\u6b21\uff0c\u7136\u540e\u8c03\u7528\u5b83\u7684 next() \u65b9\u6cd5\u83b7\u53d6\u503c\n    alert(value); // 1,2,3,4,5\n  }\n})();</code></pre> <h3 id="22-\u5f02\u6b65-generator">2.2 \u5f02\u6b65 generator</h3> <p>\u5728 <code>function*</code> \u524d\u9762\u52a0\u4e0a <code>async</code>\u3002\u8fd9\u5373\u53ef\u4f7f <code>generator</code> \u53d8\u4e3a\u5f02\u6b65\u7684</p> <p>\u7136\u540e\u4f7f\u7528 <code>for await (...)</code> \u6765\u904d\u5386\u5b83</p> <pre><code class="language-js">async function* generateSequence(start, end) {\n  for (let i = start; i &lt;= end; i++) {\n    // \u54c7\uff0c\u53ef\u4ee5\u4f7f\u7528 await \u4e86\uff01\n    await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n    yield i;\n  }\n}\n\n(async () =&gt; {\n  let generator = generateSequence(1, 5);\n  for await (let value of generator) {\n    alert(value); // 1\uff0c\u7136\u540e 2\uff0c\u7136\u540e 3\uff0c\u7136\u540e 4\uff0c\u7136\u540e 5\uff08\u5728\u6bcf\u4e2a alert \u4e4b\u95f4\u6709\u5ef6\u8fdf\uff09\n  }\n})();</code></pre> ';e.exports=l}}]);