(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["docs/sequelize/querying"],{W34M:function(e,n){var t='<h1 id="querying---\u67e5\u8be2">Querying - \u67e5\u8be2</h1> <h2 id="\u5c5e\u6027">\u5c5e\u6027</h2> <p>\u60f3\u8981\u53ea\u9009\u62e9\u67d0\u4e9b\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>attributes</code> \u9009\u9879\u3002 \u901a\u5e38\u662f\u4f20\u9012\u4e00\u4e2a\u6570\u7ec4\uff1a</p> <pre><code class="language-js">Model.findAll({\n  attributes: [&#39;foo&#39;, &#39;bar&#39;]\n});</code></pre> <pre><code class="language-sql">SELECT foo, bar ...</code></pre> <p>\u5c5e\u6027\u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u6570\u7ec4\u6765\u91cd\u547d\u540d\uff1a</p> <pre><code class="language-js">Model.findAll({\n  attributes: [&#39;foo&#39;, [&#39;bar&#39;, &#39;baz&#39;]]\n});</code></pre> <pre><code class="language-sql">SELECT foo, bar AS baz ...</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>sequelize.fn</code> \u6765\u8fdb\u884c\u805a\u5408\uff1a</p> <pre><code class="language-js">Model.findAll({\n  attributes: [[sequelize.fn(&#39;COUNT&#39;, sequelize.col(&#39;hats&#39;)), &#39;no_hats&#39;]]\n});</code></pre> <pre><code class="language-sql">SELECT COUNT(hats) AS no_hats ...</code></pre> <p>\u4f7f\u7528\u805a\u5408\u529f\u80fd\u65f6\uff0c\u5fc5\u987b\u7ed9\u5b83\u4e00\u4e2a\u522b\u540d\uff0c\u4ee5\u4fbf\u80fd\u591f\u4ece\u6a21\u578b\u4e2d\u8bbf\u95ee\u5b83\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>instance.get(&#39;no_hats&#39;)</code> \u83b7\u5f97\u5e3d\u5b50\u6570\u91cf\u3002</p> <p>\u6709\u65f6\uff0c\u5982\u679c\u60a8\u53ea\u60f3\u6dfb\u52a0\u805a\u5408\uff0c\u5219\u5217\u51fa\u6a21\u578b\u7684\u6240\u6709\u5c5e\u6027\u53ef\u80fd\u4ee4\u4eba\u538c\u70e6\uff1a</p> <pre><code class="language-js">// This is a tiresome way of getting the number of hats...\nModel.findAll({\n  attributes: [&#39;id&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, &#39;quz&#39;, [sequelize.fn(&#39;COUNT&#39;, sequelize.col(&#39;hats&#39;)), &#39;no_hats&#39;]]\n});\n\n// This is shorter, and less error prone because it still works if you add / remove attributes\nModel.findAll({\n  attributes: { include: [[sequelize.fn(&#39;COUNT&#39;, sequelize.col(&#39;hats&#39;)), &#39;no_hats&#39;]] }\n});</code></pre> <pre><code class="language-sql">SELECT id, foo, bar, baz, quz, COUNT(hats) AS no_hats ...</code></pre> <p>\u540c\u6837\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5220\u9664\u4e00\u4e9b\u6307\u5b9a\u7684\u5c5e\u6027\uff1a</p> <pre><code class="language-js">Model.findAll({\n  attributes: { exclude: [&#39;baz&#39;] }\n});</code></pre> <pre><code class="language-sql">SELECT id, foo, bar, quz ...</code></pre> <h2 id="where">Where</h2> <p>\u65e0\u8bba\u60a8\u662f\u901a\u8fc7 findAll/find \u6216\u6279\u91cf updates/destroys \u8fdb\u884c\u67e5\u8be2\uff0c\u90fd\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a <code>where</code> \u5bf9\u8c61\u6765\u8fc7\u6ee4\u67e5\u8be2\u3002</p> <p><code>where</code> \u901a\u5e38\u7528 attribute:value \u952e\u503c\u5bf9\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5176\u4e2d value \u53ef\u4ee5\u662f\u5339\u914d\u7b49\u5f0f\u7684\u6570\u636e\u6216\u5176\u4ed6\u8fd0\u7b97\u7b26\u7684\u952e\u503c\u5bf9\u8c61\u3002</p> <p>\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957 <code>or</code> \u548c <code>and</code> <code>\u8fd0\u7b97\u7b26</code> \u7684\u96c6\u5408\u6765\u751f\u6210\u590d\u6742\u7684 AND/OR \u6761\u4ef6\u3002</p> <h3 id="\u57fa\u7840">\u57fa\u7840</h3> <pre><code class="language-js">const Op = Sequelize.Op;\n\nPost.findAll({\n  where: {\n    authorId: 2\n  }\n});\n// SELECT * FROM post WHERE authorId = 2\n\nPost.findAll({\n  where: {\n    authorId: 12,\n    status: &#39;active&#39;\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = &#39;active&#39;;\n\nPost.findAll({\n  where: {\n    [Op.or]: [{authorId: 12}, {authorId: 13}]\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;\n\nPost.findAll({\n  where: {\n    authorId: {\n      [Op.or]: [12, 13]\n    }\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;\n\nPost.destroy({\n  where: {\n    status: &#39;inactive&#39;\n  }\n});\n// DELETE FROM post WHERE status = &#39;inactive&#39;;\n\nPost.update({\n  updatedAt: null,\n}, {\n  where: {\n    deletedAt: {\n      [Op.ne]: null\n    }\n  }\n});\n// UPDATE post SET updatedAt = null WHERE deletedAt NOT NULL;\n\nPost.findAll({\n  where: sequelize.where(sequelize.fn(&#39;char_length&#39;, sequelize.col(&#39;status&#39;)), 6)\n});\n// SELECT * FROM post WHERE char_length(status) = 6;</code></pre> <h3 id="\u64cd\u4f5c\u7b26">\u64cd\u4f5c\u7b26</h3> <p>Sequelize \u53ef\u7528\u4e8e\u521b\u5efa\u66f4\u590d\u6742\u6bd4\u8f83\u7684\u7b26\u53f7\u8fd0\u7b97\u7b26 -</p> <pre><code class="language-js">const Op = Sequelize.Op\n\n[Op.and]: {a: 5}           // \u4e14 (a = 5)\n[Op.or]: [{a: 5}, {a: 6}]  // (a = 5 \u6216 a = 6)\n[Op.gt]: 6,                // id &gt; 6\n[Op.gte]: 6,               // id &gt;= 6\n[Op.lt]: 10,               // id &lt; 10\n[Op.lte]: 10,              // id &lt;= 10\n[Op.ne]: 20,               // id != 20\n[Op.eq]: 3,                // = 3\n[Op.not]: true,            // \u4e0d\u662f TRUE\n[Op.between]: [6, 10],     // \u5728 6 \u548c 10 \u4e4b\u95f4\n[Op.notBetween]: [11, 15], // \u4e0d\u5728 11 \u548c 15 \u4e4b\u95f4\n[Op.in]: [1, 2],           // \u5728 [1, 2] \u4e4b\u4e2d\n[Op.notIn]: [1, 2],        // \u4e0d\u5728 [1, 2] \u4e4b\u4e2d\n[Op.like]: &#39;%hat&#39;,         // \u5305\u542b &#39;%hat&#39;\n[Op.notLike]: &#39;%hat&#39;       // \u4e0d\u5305\u542b &#39;%hat&#39;\n[Op.iLike]: &#39;%hat&#39;         // \u5305\u542b &#39;%hat&#39; (\u4e0d\u533a\u5206\u5927\u5c0f\u5199)  (\u4ec5\u9650 PG)\n[Op.notILike]: &#39;%hat&#39;      // \u4e0d\u5305\u542b &#39;%hat&#39;  (\u4ec5\u9650 PG)\n[Op.regexp]: &#39;^[h|a|t]&#39;    // \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f/~ &#39;^[h|a|t]&#39; (\u4ec5\u9650 MySQL/PG)\n[Op.notRegexp]: &#39;^[h|a|t]&#39; // \u4e0d\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f/!~ &#39;^[h|a|t]&#39; (\u4ec5\u9650 MySQL/PG)\n[Op.iRegexp]: &#39;^[h|a|t]&#39;    // ~* &#39;^[h|a|t]&#39; (\u4ec5\u9650 PG)\n[Op.notIRegexp]: &#39;^[h|a|t]&#39; // !~* &#39;^[h|a|t]&#39; (\u4ec5\u9650 PG)\n[Op.like]: { [Op.any]: [&#39;cat&#39;, &#39;hat&#39;]} // \u5305\u542b\u4efb\u4f55\u6570\u7ec4[&#39;cat&#39;, &#39;hat&#39;] - \u540c\u6837\u9002\u7528\u4e8e iLike \u548c notLike\n[Op.overlap]: [1, 2]       // &amp;&amp; [1, 2] (PG\u6570\u7ec4\u91cd\u53e0\u8fd0\u7b97\u7b26)\n[Op.contains]: [1, 2]      // @&gt; [1, 2] (PG\u6570\u7ec4\u5305\u542b\u8fd0\u7b97\u7b26)\n[Op.contained]: [1, 2]     // &lt;@ [1, 2] (PG\u6570\u7ec4\u5305\u542b\u4e8e\u8fd0\u7b97\u7b26)\n[Op.any]: [2,3]            // \u4efb\u4f55\u6570\u7ec4[2, 3]::INTEGER (\u4ec5\u9650PG)\n\n[Op.col]: &#39;user.organization_id&#39; // = &#39;user&#39;.&#39;organization_id&#39;, \u4f7f\u7528\u6570\u636e\u5e93\u8bed\u8a00\u7279\u5b9a\u7684\u5217\u6807\u8bc6\u7b26, \u672c\u4f8b\u4f7f\u7528 PG</code></pre> <h4 id="\u8303\u56f4\u9009\u9879">\u8303\u56f4\u9009\u9879</h4> <p>\u6240\u6709\u64cd\u4f5c\u7b26\u90fd\u652f\u6301\u652f\u6301\u7684\u8303\u56f4\u7c7b\u578b\u67e5\u8be2\u3002</p> <p>\u8bf7\u8bb0\u4f4f\uff0c\u63d0\u4f9b\u7684\u8303\u56f4\u503c\u4e5f\u53ef\u4ee5<a href="/manual/tutorial/models-definition.html#range-types">\u5b9a\u4e49\u7ed1\u5b9a\u7684 inclusion/exclusion</a>\u3002</p> <pre><code class="language-js">// \u6240\u6709\u4e0a\u8ff0\u76f8\u7b49\u548c\u4e0d\u76f8\u7b49\u7684\u64cd\u4f5c\u7b26\u52a0\u4e0a\u4ee5\u4e0b\u5185\u5bb9:\n\n[Op.contains]: 2           // @&gt; &#39;2&#39;::integer (PG range contains element operator)\n[Op.contains]: [1, 2]      // @&gt; [1, 2) (PG range contains range operator)\n[Op.contained]: [1, 2]     // &lt;@ [1, 2) (PG range is contained by operator)\n[Op.overlap]: [1, 2]       // &amp;&amp; [1, 2) (PG range overlap (have points in common) operator)\n[Op.adjacent]: [1, 2]      // -|- [1, 2) (PG range is adjacent to operator)\n[Op.strictLeft]: [1, 2]    // &lt;&lt; [1, 2) (PG range strictly left of operator)\n[Op.strictRight]: [1, 2]   // &gt;&gt; [1, 2) (PG range strictly right of operator)\n[Op.noExtendRight]: [1, 2] // &amp;&lt; [1, 2) (PG range does not extend to the right of operator)\n[Op.noExtendLeft]: [1, 2]  // &amp;&gt; [1, 2) (PG range does not extend to the left of operator)</code></pre> <h4 id="\u7ec4\u5408">\u7ec4\u5408</h4> <pre><code class="language-js">{\n  rank: {\n    [Op.or]: {\n      [Op.lt]: 1000,\n      [Op.eq]: null\n    }\n  }\n}\n// rank &lt; 1000 OR rank IS NULL\n\n{\n  createdAt: {\n    [Op.lt]: new Date(),\n    [Op.gt]: new Date(new Date() - 24 * 60 * 60 * 1000)\n  }\n}\n// createdAt &lt; [timestamp] AND createdAt &gt; [timestamp]\n\n{\n  [Op.or]: [\n    {\n      title: {\n        [Op.like]: &#39;Boat%&#39;\n      }\n    },\n    {\n      description: {\n        [Op.like]: &#39;%boat%&#39;\n      }\n    }\n  ]\n}\n// title LIKE &#39;Boat%&#39; OR description LIKE &#39;%boat%&#39;</code></pre> <h4 id="\u8fd0\u7b97\u7b26\u522b\u540d">\u8fd0\u7b97\u7b26\u522b\u540d</h4> <p>Sequelize \u5141\u8bb8\u5c06\u7279\u5b9a\u5b57\u7b26\u4e32\u8bbe\u7f6e\u4e3a\u64cd\u4f5c\u7b26\u7684\u522b\u540d -</p> <pre><code class="language-js">const Op = Sequelize.Op;\nconst operatorsAliases = {\n  $gt: Op.gt\n}\nconst connection = new Sequelize(db, user, pass, { operatorsAliases })\n\n[Op.gt]: 6 // &gt; 6\n$gt: 6 // \u7b49\u540c\u4e8e\u4f7f\u7528 Op.gt (&gt; 6)</code></pre> <h4 id="\u8fd0\u7b97\u7b26\u5b89\u5168\u6027">\u8fd0\u7b97\u7b26\u5b89\u5168\u6027</h4> <p>\u4f7f\u7528\u6ca1\u6709\u4efb\u4f55\u522b\u540d\u7684 Sequelize \u53ef\u4ee5\u63d0\u9ad8\u5b89\u5168\u6027\u3002</p> <p>\u4e00\u4e9b\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06\u7528\u6237\u8f93\u5165\u89e3\u6790\u4e3ajs\u5bf9\u8c61\uff0c\u5982\u679c\u60a8\u65e0\u6cd5\u6e05\u7406\u8f93\u5165\uff0c\u5219\u53ef\u80fd\u4f1a\u5c06\u5177\u6709\u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26\u7684\u5bf9\u8c61\u6ce8\u5165\u5230 Sequelize\u3002</p> <p>\u4e0d\u5e26\u4efb\u4f55\u5b57\u7b26\u4e32\u522b\u540d\u5c06\u4f7f\u8fd0\u7b97\u7b26\u4e0d\u592a\u53ef\u80fd\u88ab\u6ce8\u5165\uff0c\u4f46\u60a8\u5e94\u8be5\u59cb\u7ec8\u6b63\u786e\u9a8c\u8bc1\u548c\u6e05\u7406\u7528\u6237\u8f93\u5165\u3002</p> <p>\u7531\u4e8e\u5411\u540e\u517c\u5bb9\u6027\u539f\u56e0Sequelize\u9ed8\u8ba4\u8bbe\u7f6e\u4ee5\u4e0b\u522b\u540d -</p> <p>$eq, $ne, $gte, $gt, $lte, $lt, $not, $in, $notIn, $is, $like, $notLike, $iLike, $notILike, $regexp, $notRegexp, $iRegexp, $notIRegexp, $between, $notBetween, $overlap, $contains, $contained, $adjacent, $strictLeft, $strictRight, $noExtendRight, $noExtendLeft, $and, $or, $any, $all, $values, $col</p> <p>\u76ee\u524d\uff0c\u4ee5\u4e0b\u9057\u7559\u522b\u540d\u4e5f\u88ab\u8bbe\u7f6e\uff0c\u4f46\u8ba1\u5212\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5b8c\u5168\u5220\u9664 -</p> <p>ne, not, in, notIn, gte, gt, lte, lt, like, ilike, $ilike, nlike, $notlike, notilike, .., between, !.., notbetween, nbetween, overlap, &amp;&amp;, @&gt;, &lt;@</p> <p>\u4e3a\u4e86\u66f4\u597d\u7684\u5b89\u5168\u6027\uff0c\u5efa\u8bae\u4f7f\u7528 <code>Sequelize.Op</code>\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u4efb\u4f55\u5b57\u7b26\u4e32\u522b\u540d\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e<code>operatorsAliases</code>\u9009\u9879\u6765\u9650\u5236\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7684\u522b\u540d\uff0c\u8bf7\u8bb0\u4f4f\u8981\u6e05\u7406\u7528\u6237\u8f93\u5165\uff0c\u7279\u522b\u662f\u5f53\u60a8\u76f4\u63a5\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9 Sequelize \u65b9\u6cd5\u65f6\u3002</p> <pre><code class="language-js">const Op = Sequelize.Op;\n\n// \u4e0d\u7528\u4efb\u4f55\u64cd\u4f5c\u7b26\u522b\u540d\u4f7f\u7528 sequelize \nconst connection = new Sequelize(db, user, pass, { operatorsAliases: false });\n\n// \u53ea\u7528 $and =&gt; Op.and \u64cd\u4f5c\u7b26\u522b\u540d\u4f7f\u7528 sequelize \nconst connection2 = new Sequelize(db, user, pass, { operatorsAliases: { $and: Op.and } });</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528\u9ed8\u8ba4\u522b\u540d\u5e76\u4e14\u4e0d\u9650\u5236\u5b83\u4eec\uff0cSequelize\u4f1a\u53d1\u51fa\u8b66\u544a\u3002\u5982\u679c\u60a8\u60f3\u7ee7\u7eed\u4f7f\u7528\u6240\u6709\u9ed8\u8ba4\u522b\u540d\uff08\u4e0d\u5305\u62ec\u65e7\u7248\u522b\u540d\uff09\u800c\u4e0d\u53d1\u51fa\u8b66\u544a\uff0c\u60a8\u53ef\u4ee5\u4f20\u9012\u4ee5\u4e0b\u8fd0\u7b97\u7b26\u53c2\u6570 -</p> <pre><code class="language-js">const Op = Sequelize.Op;\nconst operatorsAliases = {\n  $eq: Op.eq,\n  $ne: Op.ne,\n  $gte: Op.gte,\n  $gt: Op.gt,\n  $lte: Op.lte,\n  $lt: Op.lt,\n  $not: Op.not,\n  $in: Op.in,\n  $notIn: Op.notIn,\n  $is: Op.is,\n  $like: Op.like,\n  $notLike: Op.notLike,\n  $iLike: Op.iLike,\n  $notILike: Op.notILike,\n  $regexp: Op.regexp,\n  $notRegexp: Op.notRegexp,\n  $iRegexp: Op.iRegexp,\n  $notIRegexp: Op.notIRegexp,\n  $between: Op.between,\n  $notBetween: Op.notBetween,\n  $overlap: Op.overlap,\n  $contains: Op.contains,\n  $contained: Op.contained,\n  $adjacent: Op.adjacent,\n  $strictLeft: Op.strictLeft,\n  $strictRight: Op.strictRight,\n  $noExtendRight: Op.noExtendRight,\n  $noExtendLeft: Op.noExtendLeft,\n  $and: Op.and,\n  $or: Op.or,\n  $any: Op.any,\n  $all: Op.all,\n  $values: Op.values,\n  $col: Op.col\n};\n\nconst connection = new Sequelize(db, user, pass, { operatorsAliases });</code></pre> <h3 id="json">JSON</h3> <p>JSON \u6570\u636e\u7c7b\u578b\u4ec5\u7531 PostgreSQL\uff0cSQLite \u548c MySQL \u8bed\u8a00\u652f\u6301\u3002</p> <h4 id="postgresql">PostgreSQL</h4> <p>PostgreSQL \u4e2d\u7684 JSON \u6570\u636e\u7c7b\u578b\u5c06\u503c\u5b58\u50a8\u4e3a\u7eaf\u6587\u672c\uff0c\u800c\u4e0d\u662f\u4e8c\u8fdb\u5236\u8868\u793a\u3002 \u5982\u679c\u60a8\u53ea\u662f\u60f3\u5b58\u50a8\u548c\u68c0\u7d22 JSON \u683c\u5f0f\u6570\u636e\uff0c\u90a3\u4e48\u4f7f\u7528 JSON \u5c06\u5360\u7528\u66f4\u5c11\u7684\u78c1\u76d8\u7a7a\u95f4\uff0c\u5e76\u4e14\u4ece\u5176\u8f93\u5165\u6570\u636e\u4e2d\u6784\u5efa\u65f6\u95f4\u66f4\u5c11\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u5bf9 JSON \u503c\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u63cf\u8ff0\u7684 JSONB \u6570\u636e\u7c7b\u578b\u3002</p> <h4 id="mssql">MSSQL</h4> <p>MSSQL \u6ca1\u6709 JSON \u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u5b83\u786e\u5b9e\u63d0\u4f9b\u4e86\u5bf9\u4e8e\u81ea SQL Server 2016 \u4ee5\u6765\u901a\u8fc7\u67d0\u4e9b\u51fd\u6570\u5b58\u50a8\u4e3a\u5b57\u7b26\u4e32\u7684 JSON \u7684\u652f\u6301\u3002\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u60a8\u5c06\u80fd\u591f\u67e5\u8be2\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u4e2d\u7684 JSON\uff0c\u4f46\u662f\u4efb\u4f55\u8fd4\u56de\u7684\u503c\u5c06\u9700\u8981\u5206\u522b\u8fdb\u884c\u89e3\u6790\u3002</p> <pre><code class="language-js">// ISJSON - \u6d4b\u8bd5\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b\u6709\u6548\u7684 JSON\nUser.findAll({\n  where: sequelize.where(sequelize.fn(&#39;ISJSON&#39;, sequelize.col(&#39;userDetails&#39;)), 1)\n})\n\n// JSON_VALUE - \u4ece JSON \u5b57\u7b26\u4e32\u63d0\u53d6\u6807\u91cf\u503c\nUser.findAll({\n  attributes: [[ sequelize.fn(&#39;JSON_VALUE&#39;, sequelize.col(&#39;userDetails&#39;), &#39;$.address.Line1&#39;), &#39;address line 1&#39;]]\n})\n\n// JSON_VALUE - \u4ece JSON \u5b57\u7b26\u4e32\u4e2d\u67e5\u8be2\u6807\u91cf\u503c\nUser.findAll({\n  where: sequelize.where(sequelize.fn(&#39;JSON_VALUE&#39;, sequelize.col(&#39;userDetails&#39;), &#39;$.address.Line1&#39;), &#39;14, Foo Street&#39;)\n})\n\n// JSON_QUERY - \u63d0\u53d6\u4e00\u4e2a\u5bf9\u8c61\u6216\u6570\u7ec4\nUser.findAll({\n  attributes: [[ sequelize.fn(&#39;JSON_QUERY&#39;, sequelize.col(&#39;userDetails&#39;), &#39;$.address&#39;), &#39;full address&#39;]]\n})</code></pre> <h3 id="jsonb">JSONB</h3> <p>JSONB \u53ef\u4ee5\u4ee5\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u8fdb\u884c\u67e5\u8be2\u3002</p> <h4 id="\u5d4c\u5957\u5bf9\u8c61">\u5d4c\u5957\u5bf9\u8c61</h4> <pre><code class="language-js">{\n  meta: {\n    video: {\n      url: {\n        [Op.ne]: null\n      }\n    }\n  }\n}</code></pre> <h4 id="\u5d4c\u5957\u952e">\u5d4c\u5957\u952e</h4> <pre><code class="language-js">{\n  &quot;meta.audio.length&quot;: {\n    [Op.gt]: 20\n  }\n}</code></pre> <h4 id="\u5916\u5305\u88f9">\u5916\u5305\u88f9</h4> <pre><code class="language-js">{\n  &quot;meta&quot;: {\n    [Op.contains]: {\n      site: {\n        url: &#39;http://google.com&#39;\n      }\n    }\n  }\n}</code></pre> <h3 id="\u5173\u7cfb--\u5173\u8054">\u5173\u7cfb / \u5173\u8054</h3> <pre><code class="language-js">// \u627e\u5230\u6240\u6709\u5177\u6709\u81f3\u5c11\u4e00\u4e2a task \u7684  project\uff0c\u5176\u4e2d task.state === project.state\nProject.findAll({\n    include: [{\n        model: Task,\n        where: { state: Sequelize.col(&#39;project.state&#39;) }\n    }]\n})</code></pre> <h2 id="\u5206\u9875--\u9650\u5236">\u5206\u9875 / \u9650\u5236</h2> <pre><code class="language-js">// \u83b7\u53d610\u4e2a\u5b9e\u4f8b/\u884c\nProject.findAll({ limit: 10 })\n\n// \u8df3\u8fc78\u4e2a\u5b9e\u4f8b/\u884c\nProject.findAll({ offset: 8 })\n\n// \u8df3\u8fc75\u4e2a\u5b9e\u4f8b\uff0c\u7136\u540e\u53d65\u4e2a\nProject.findAll({ offset: 5, limit: 5 })</code></pre> <h2 id="\u6392\u5e8f">\u6392\u5e8f</h2> <p><code>order</code> \u9700\u8981\u4e00\u4e2a\u6761\u76ee\u7684\u6570\u7ec4\u6765\u6392\u5e8f\u67e5\u8be2\u6216\u8005\u4e00\u4e2a sequelize \u65b9\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u5c06\u8981\u4f7f\u7528\u4efb\u4e00\u5c5e\u6027\u7684 tuple/array\uff0c\u5e76\u786e\u5b9a\u6392\u5e8f\u7684\u6b63\u53cd\u65b9\u5411\u3002</p> <pre><code class="language-js">Subtask.findAll({\n  order: [\n    // \u5c06\u8f6c\u4e49\u7528\u6237\u540d\uff0c\u5e76\u6839\u636e\u6709\u6548\u7684\u65b9\u5411\u53c2\u6570\u5217\u8868\u9a8c\u8bc1DESC\n    [&#39;title&#39;, &#39;DESC&#39;],\n\n    // \u5c06\u6309\u6700\u5927\u503c\u6392\u5e8f(age)\n    sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;)),\n\n    // \u5c06\u6309\u6700\u5927\u987a\u5e8f(age) DESC\n    [sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;)), &#39;DESC&#39;],\n\n    // \u5c06\u6309 otherfunction \u6392\u5e8f(`col1`, 12, &#39;lalala&#39;) DESC\n    [sequelize.fn(&#39;otherfunction&#39;, sequelize.col(&#39;col1&#39;), 12, &#39;lalala&#39;), &#39;DESC&#39;],\n\n    // \u5c06\u4f7f\u7528\u6a21\u578b\u540d\u79f0\u4f5c\u4e3a\u5173\u8054\u7684\u540d\u79f0\u6392\u5e8f\u5173\u8054\u6a21\u578b\u7684 created_at\u3002\n    [Task, &#39;createdAt&#39;, &#39;DESC&#39;],\n\n    // Will order through an associated model&#39;s created_at using the model names as the associations&#39; names.\n    [Task, Project, &#39;createdAt&#39;, &#39;DESC&#39;],\n\n    // \u5c06\u4f7f\u7528\u5173\u8054\u7684\u540d\u79f0\u7531\u5173\u8054\u6a21\u578b\u7684created_at\u6392\u5e8f\u3002\n    [&#39;Task&#39;, &#39;createdAt&#39;, &#39;DESC&#39;],\n\n    // Will order by a nested associated model&#39;s created_at using the names of the associations.\n    [&#39;Task&#39;, &#39;Project&#39;, &#39;createdAt&#39;, &#39;DESC&#39;],\n\n    // Will order by an associated model&#39;s created_at using an association object. (\u4f18\u9009\u65b9\u6cd5)\n    [Subtask.associations.Task, &#39;createdAt&#39;, &#39;DESC&#39;],\n\n    // Will order by a nested associated model&#39;s created_at using association objects. (\u4f18\u9009\u65b9\u6cd5)\n    [Subtask.associations.Task, Task.associations.Project, &#39;createdAt&#39;, &#39;DESC&#39;],\n\n    // Will order by an associated model&#39;s created_at using a simple association object.\n    [{model: Task, as: &#39;Task&#39;}, &#39;createdAt&#39;, &#39;DESC&#39;],\n\n    // \u5d4c\u5957\u5173\u8054\u6a21\u578b\u7684 created_at \u7b80\u5355\u5173\u8054\u5bf9\u8c61\u6392\u5e8f\n    [{model: Task, as: &#39;Task&#39;}, {model: Project, as: &#39;Project&#39;}, &#39;createdAt&#39;, &#39;DESC&#39;]\n  ]\n\n  // \u5c06\u6309\u5e74\u9f84\u6700\u5927\u503c\u964d\u5e8f\u6392\u5217\n  order: sequelize.literal(&#39;max(age) DESC&#39;)\n\n  // \u6309\u6700\u5e74\u9f84\u5927\u503c\u5347\u5e8f\u6392\u5217\uff0c\u5f53\u7701\u7565\u6392\u5e8f\u6761\u4ef6\u65f6\u9ed8\u8ba4\u662f\u5347\u5e8f\u6392\u5217\n  order: sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;))\n\n  // \u6309\u5347\u5e8f\u6392\u5217\u662f\u7701\u7565\u6392\u5e8f\u6761\u4ef6\u7684\u9ed8\u8ba4\u987a\u5e8f\n  order: sequelize.col(&#39;age&#39;)\n\n  // \u5c06\u6839\u636e\u65b9\u8a00\u968f\u673a\u6392\u5e8f (\u800c\u4e0d\u662f fn(&#39;RAND&#39;) \u6216 fn(&#39;RANDOM&#39;))\n  order: sequelize.random()\n})</code></pre> <h2 id="table-hint">Table Hint</h2> <p>\u5f53\u4f7f\u7528 mssql \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>tableHint</code> \u6765\u9009\u62e9\u4f20\u9012\u4e00\u4e2a\u8868\u63d0\u793a\u3002 \u8be5\u63d0\u793a\u5fc5\u987b\u662f\u6765\u81ea <code>Sequelize.TableHints</code> \u7684\u503c\uff0c\u53ea\u80fd\u5728\u7edd\u5bf9\u5fc5\u8981\u65f6\u4f7f\u7528\u3002 \u6bcf\u4e2a\u67e5\u8be2\u5f53\u524d\u4ec5\u652f\u6301\u5355\u4e2a\u8868\u63d0\u793a\u3002</p> <p>\u8868\u63d0\u793a\u901a\u8fc7\u6307\u5b9a\u67d0\u4e9b\u9009\u9879\u6765\u8986\u76d6 mssql \u67e5\u8be2\u4f18\u5316\u5668\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u5b83\u4eec\u53ea\u5f71\u54cd\u8be5\u5b50\u53e5\u4e2d\u5f15\u7528\u7684\u8868\u6216\u89c6\u56fe\u3002</p> <pre><code class="language-js">const TableHints = Sequelize.TableHints;\n\nProject.findAll({\n  // \u6dfb\u52a0 table hint NOLOCK\n  tableHint: TableHints.NOLOCK\n  // \u8fd9\u5c06\u751f\u6210 SQL &#39;WITH (NOLOCK)&#39;\n})</code></pre> ';e.exports=t}}]);