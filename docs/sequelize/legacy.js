(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["docs/sequelize/legacy"],{"8gib":function(e,n){var o='<h1 id="working-with-legacy-tables---\u4f7f\u7528\u9057\u7559\u8868">Working with legacy tables - \u4f7f\u7528\u9057\u7559\u8868</h1> <p>\u867d\u7136 Sequelize \u81ea\u8ba4\u4e3a\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528, \u4f46\u662f\u5982\u679c\u4f60\u8981\u4f7f\u7528\u5e94\u7528\u4e4b\u524d\u9057\u7559\u7684\u8d44\u4ea7\u548c\u51ed\u636e,\u4ec5\u9700\u8981\u505a\u4e00\u70b9\u5fae\u4e0d\u8db3\u9053\u7684\u8bbe\u7f6e\u5373\u53ef\u3002</p> <h2 id="\u8868">\u8868</h2> <pre><code class="language-js">sequelize.define(&#39;user&#39;, {\n\n}, {\n  tableName: &#39;users&#39;\n});</code></pre> <h2 id="\u5b57\u6bb5">\u5b57\u6bb5</h2> <pre><code class="language-js">sequelize.define(&#39;modelName&#39;, {\n  userId: {\n    type: Sequelize.INTEGER,\n    field: &#39;user_id&#39;\n  }\n});</code></pre> <h2 id="\u4e3b\u952e">\u4e3b\u952e</h2> <p>Sequelize\u5c06\u5047\u8bbe\u60a8\u7684\u8868\u9ed8\u8ba4\u5177\u6709<code>id</code>\u4e3b\u952e\u5c5e\u6027\u3002</p> <p>\u8981\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u4e3b\u952e\uff1a</p> <pre><code class="language-js">sequelize.define(&#39;collection&#39;, {\n  uid: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true // Automatically gets converted to SERIAL for postgres\n  }\n});\n\nsequelize.define(&#39;collection&#39;, {\n  uuid: {\n    type: Sequelize.UUID,\n    primaryKey: true\n  }\n});</code></pre> <p>\u5982\u679c\u4f60\u7684\u6a21\u578b\u6839\u672c\u6ca1\u6709\u4e3b\u952e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>Model.removeAttribute(&#39;id&#39;);</code></p> <h2 id="\u5916\u952e">\u5916\u952e</h2> <pre><code class="language-js">// 1:1\nOrganization.belongsTo(User, {foreignKey: &#39;owner_id&#39;});\nUser.hasOne(Organization, {foreignKey: &#39;owner_id&#39;});\n\n// 1:M\nProject.hasMany(Task, {foreignKey: &#39;tasks_pk&#39;});\nTask.belongsTo(Project, {foreignKey: &#39;tasks_pk&#39;});\n\n// N:M\nUser.hasMany(Role, {through: &#39;user_has_roles&#39;, foreignKey: &#39;user_role_user_id&#39;});\nRole.hasMany(User, {through: &#39;user_has_roles&#39;, foreignKey: &#39;roles_identifier&#39;});</code></pre> ';e.exports=o}}]);