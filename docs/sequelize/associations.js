(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["docs/sequelize/associations"],{uCQT:function(e,n){var s='<h1 id="associations---\u5173\u8054">Associations - \u5173\u8054</h1> <p>\u672c\u90e8\u5206\u63cf\u8ff0 sequelize \u4e2d\u7684\u5404\u79cd\u5173\u8054\u7c7b\u578b\u3002 \u5f53\u8c03\u7528 <code>User.hasOne(Project)</code> \u8fd9\u6837\u7684\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u8bf4 <code>User</code> \u6a21\u578b\uff08\u8be5\u51fd\u6570\u88ab\u8c03\u7528\u7684\u6a21\u578b\uff09\u662f <strong>source</strong> \u800c <code>Project</code> \u6a21\u578b\uff08\u6a21\u578b\u88ab\u4f20\u9012\u4e3a\u53c2\u6570\uff09\u662f <strong>target</strong> \u3002</p> <h2 id="\u4e00\u5bf9\u4e00\u5173\u8054">\u4e00\u5bf9\u4e00\u5173\u8054</h2> <p>\u4e00\u5bf9\u4e00\u5173\u8054\u662f\u901a\u8fc7\u5355\u4e2a\u5916\u952e\u8fde\u63a5\u7684\u4e24\u4e2a\u6a21\u578b\u4e4b\u95f4\u7684\u5173\u8054\u3002</p> <h3 id="belongsto">BelongsTo</h3> <p>BelongsTo \u5173\u8054\u662f\u5728 <strong>source model</strong> \u4e0a\u5b58\u5728\u4e00\u5bf9\u4e00\u5173\u7cfb\u7684\u5916\u952e\u7684\u5173\u8054\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f <strong>Player</strong> \u901a\u8fc7 player \u7684\u5916\u952e\u4f5c\u4e3a <strong>Team</strong> \u7684\u4e00\u90e8\u5206\u3002</p> <pre><code class="language-js">const Player = this.sequelize.define(&#39;player&#39;, {/* attributes */});\nconst Team  = this.sequelize.define(&#39;team&#39;, {/* attributes */});\n\nPlayer.belongsTo(Team); // \u5c06\u5411 Player \u6dfb\u52a0\u4e00\u4e2a teamId \u5c5e\u6027\u4ee5\u4fdd\u5b58 Team \u7684\u4e3b\u952e\u503c</code></pre> <h4 id="\u5916\u952e">\u5916\u952e</h4> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u4ece\u76ee\u6807\u6a21\u578b\u540d\u79f0\u548c\u76ee\u6807\u4e3b\u952e\u540d\u79f0\u751f\u6210 belongsTo \u5173\u7cfb\u7684\u5916\u952e\u3002</p> <p>\u9ed8\u8ba4\u7684\u6837\u5f0f\u662f <code>camelCase</code>\uff0c\u4f46\u662f\u5982\u679c\u6e90\u6a21\u578b\u914d\u7f6e\u4e3a <code>underscored: true</code> \uff0c\u90a3\u4e48 foreignKey \u5c06\u662f<code>snake_case</code>\u3002</p> <pre><code class="language-js">const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})\nconst Company  = this.sequelize.define(&#39;company&#39;, {/* attributes */});\n\nUser.belongsTo(Company); // \u5c06 companyId \u6dfb\u52a0\u5230 user\n\nconst User = this.sequelize.define(&#39;user&#39;, {/* attributes */}, {underscored: true})\nconst Company  = this.sequelize.define(&#39;company&#39;, {\n  uuid: {\n    type: Sequelize.UUID,\n    primaryKey: true\n  }\n});\n\nUser.belongsTo(Company); // \u5c06 company_uuid \u6dfb\u52a0\u5230 user</code></pre> <p>\u5728\u5df2\u5b9a\u4e49 <code>as</code> \u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4f7f\u7528\u5b83\u4ee3\u66ff\u76ee\u6807\u6a21\u578b\u540d\u79f0\u3002</p> <pre><code class="language-js">const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})\nconst UserRole  = this.sequelize.define(&#39;userRole&#39;, {/* attributes */});\n\nUser.belongsTo(UserRole, {as: &#39;role&#39;}); // \u5c06 role \u6dfb\u52a0\u5230 user \u800c\u4e0d\u662f userRole</code></pre> <p>\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u5916\u952e\u53ef\u4ee5\u7528 <code>foreignKey</code> \u9009\u9879\u8986\u76d6\u3002 \u5f53\u4f7f\u7528\u5916\u952e\u9009\u9879\u65f6\uff0cSequelize \u5c06\u6309\u539f\u6837\u4f7f\u7528\uff1a</p> <pre><code class="language-js">const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})\nconst Company  = this.sequelize.define(&#39;company&#39;, {/* attributes */});\n\nUser.belongsTo(Company, {foreignKey: &#39;fk_company&#39;}); // \u5c06 fk_company \u6dfb\u52a0\u5230 User</code></pre> <h4 id="\u76ee\u6807\u952e">\u76ee\u6807\u952e</h4> <p>\u76ee\u6807\u952e\u662f\u6e90\u6a21\u578b\u4e0a\u7684\u5916\u952e\u5217\u6307\u5411\u7684\u76ee\u6807\u6a21\u578b\u4e0a\u7684\u5217\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cbelongsTo \u5173\u7cfb\u7684\u76ee\u6807\u952e\u5c06\u662f\u76ee\u6807\u6a21\u578b\u7684\u4e3b\u952e\u3002 \u8981\u5b9a\u4e49\u81ea\u5b9a\u4e49\u5217\uff0c\u8bf7\u4f7f\u7528 <code>targetKey</code> \u9009\u9879\u3002</p> <pre><code class="language-js">const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})\nconst Company  = this.sequelize.define(&#39;company&#39;, {/* attributes */});\n\nUser.belongsTo(Company, {foreignKey: &#39;fk_companyname&#39;, targetKey: &#39;name&#39;}); // \u6dfb\u52a0 fk_companyname \u5230 User</code></pre> <h3 id="hasone">HasOne</h3> <p>HasOne \u5173\u8054\u662f\u5728 <strong>target model</strong> \u4e0a\u5b58\u5728\u4e00\u5bf9\u4e00\u5173\u7cfb\u7684\u5916\u952e\u7684\u5173\u8054\u3002</p> <pre><code class="language-js">const User = sequelize.define(&#39;user&#39;, {/* ... */})\nconst Project = sequelize.define(&#39;project&#39;, {/* ... */})\n\n// \u5355\u5411\u5173\u8054\nProject.hasOne(User)\n\n/*\n  \u5728\u6b64\u793a\u4f8b\u4e2d\uff0chasOne \u5c06\u5411 User \u6a21\u578b\u6dfb\u52a0\u4e00\u4e2a projectId \u5c5e\u6027 \uff01 \n  \u6b64\u5916\uff0cProject.prototype \u5c06\u6839\u636e\u4f20\u9012\u7ed9\u5b9a\u4e49\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u83b7\u53d6 getUser \u548c setUser \u7684\u65b9\u6cd5\u3002 \n  \u5982\u679c\u542f\u7528\u4e86 underscore \u6837\u5f0f\uff0c\u5219\u6dfb\u52a0\u7684\u5c5e\u6027\u5c06\u662f project_id \u800c\u4e0d\u662f projectId\u3002\n\n  \u5916\u952e\u5c06\u653e\u5728 users \u8868\u4e0a\u3002\n\n  \u4f60\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5916\u952e\uff0c\u4f8b\u5982 \u5982\u679c\u60a8\u5df2\u7ecf\u6709\u4e00\u4e2a\u73b0\u6709\u7684\u6570\u636e\u5e93\u5e76\u4e14\u60f3\u8981\u5904\u7406\u5b83\uff1a\n*/\n\nProject.hasOne(User, { foreignKey: &#39;initiator_id&#39; })\n\n/*\n  \u56e0\u4e3aSequelize\u5c06\u4f7f\u7528\u6a21\u578b\u7684\u540d\u79f0\uff08define\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff09\u4f5c\u4e3a\u8bbf\u95ee\u5668\u65b9\u6cd5\uff0c\n  \u8fd8\u53ef\u4ee5\u5c06\u7279\u6b8a\u9009\u9879\u4f20\u9012\u7ed9hasOne\uff1a\n*/\n\nProject.hasOne(User, { as: &#39;Initiator&#39; })\n// \u73b0\u5728\u4f60\u53ef\u4ee5\u83b7\u5f97 Project.getInitiator \u548c Project.setInitiator\n\n// \u6216\u8005\u8ba9\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e9b\u81ea\u5df1\u7684\u53c2\u8003\nconst Person = sequelize.define(&#39;person&#39;, { /* ... */})\n\nPerson.hasOne(Person, {as: &#39;Father&#39;})\n// \u8fd9\u4f1a\u5c06\u5c5e\u6027 FatherId \u6dfb\u52a0\u5230 Person\n\n// also possible:\nPerson.hasOne(Person, {as: &#39;Father&#39;, foreignKey: &#39;DadId&#39;})\n// \u8fd9\u5c06\u628a\u5c5e\u6027 DadId \u6dfb\u52a0\u5230 Person\n\n// \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u90fd\u53ef\u4ee5\uff1a\nPerson.setFather\nPerson.getFather\n\n// \u5982\u679c\u4f60\u9700\u8981\u8054\u7ed3\u8868\u4e24\u6b21\uff0c\u4f60\u53ef\u4ee5\u8054\u7ed3\u540c\u4e00\u5f20\u8868\nTeam.hasOne(Game, {as: &#39;HomeTeam&#39;, foreignKey : &#39;homeTeamId&#39;});\nTeam.hasOne(Game, {as: &#39;AwayTeam&#39;, foreignKey : &#39;awayTeamId&#39;});\n\nGame.belongsTo(Team);</code></pre> <p>\u5373\u4f7f\u5b83\u88ab\u79f0\u4e3a HasOne \u5173\u8054\uff0c\u5bf9\u4e8e\u5927\u591a\u65701\uff1a1\u5173\u7cfb\uff0c\u60a8\u901a\u5e38\u9700\u8981BelongsTo\u5173\u8054\uff0c\u56e0\u4e3a BelongsTo \u5c06\u4f1a\u5728 hasOne \u5c06\u6dfb\u52a0\u5230\u76ee\u6807\u7684\u6e90\u4e0a\u6dfb\u52a0 foreignKey\u3002</p> <h3 id="hasone-\u548c-belongsto-\u4e4b\u95f4\u7684\u533a\u522b">HasOne \u548c BelongsTo \u4e4b\u95f4\u7684\u533a\u522b</h3> <p>\u5728Sequelize 1\uff1a1\u5173\u7cfb\u4e2d\u53ef\u4ee5\u4f7f\u7528HasOne\u548cBelongsTo\u8fdb\u884c\u8bbe\u7f6e\u3002 \u5b83\u4eec\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u573a\u666f\u3002 \u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u7814\u7a76\u8fd9\u4e2a\u5dee\u5f02\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u8868\u53ef\u4ee5\u94fe\u63a5 <strong>Player</strong> \u548c <strong>Team</strong> \u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49\u4ed6\u4eec\u7684\u6a21\u578b\u3002</p> <pre><code class="language-js">const Player = this.sequelize.define(&#39;player&#39;, {/* attributes */})\nconst Team  = this.sequelize.define(&#39;team&#39;, {/* attributes */});</code></pre> <p>\u5f53\u6211\u4eec\u8fde\u63a5 Sequelize \u4e2d\u7684\u4e24\u4e2a\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u79f0\u4e3a\u4e00\u5bf9 <strong>source</strong> \u548c <strong>target</strong> \u6a21\u578b\u3002\u50cf\u8fd9\u6837</p> <p>\u5c06 <strong>Player</strong> \u4f5c\u4e3a <strong>source</strong> \u800c <strong>Team</strong> \u4f5c\u4e3a <strong>target</strong></p> <pre><code class="language-js">Player.belongsTo(Team);\n//\u6216\nPlayer.hasOne(Team);</code></pre> <p>\u5c06 <strong>Team</strong> \u4f5c\u4e3a <strong>source</strong> \u800c <strong>Player</strong> \u4f5c\u4e3a <strong>target</strong></p> <pre><code class="language-js">Team.belongsTo(Player);\n//Or\nTeam.hasOne(Player);</code></pre> <p>HasOne \u548c BelongsTo \u5c06\u5173\u8054\u952e\u63d2\u5165\u5230\u4e0d\u540c\u7684\u6a21\u578b\u4e2d\u3002 HasOne \u5728 <strong>target</strong> \u6a21\u578b\u4e2d\u63d2\u5165\u5173\u8054\u952e\uff0c\u800c BelongsTo \u5c06\u5173\u8054\u952e\u63d2\u5165\u5230 <strong>source</strong> \u6a21\u578b\u4e2d\u3002</p> <p>\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf4\u660e\u4e86 BelongsTo \u548c HasOne \u7684\u7528\u6cd5\u3002</p> <pre><code class="language-js">const Player = this.sequelize.define(&#39;player&#39;, {/* attributes */})\nconst Coach  = this.sequelize.define(&#39;coach&#39;, {/* attributes */})\nconst Team  = this.sequelize.define(&#39;team&#39;, {/* attributes */});</code></pre> <p>\u5047\u8bbe\u6211\u4eec\u7684 <code>Player</code> \u6a21\u578b\u6709\u5173\u4e8e\u5176\u56e2\u961f\u7684\u4fe1\u606f\u4e3a <code>teamId</code> \u5217\u3002 \u5173\u4e8e\u6bcf\u4e2a\u56e2\u961f\u7684 <code>Coach</code> \u7684\u4fe1\u606f\u4f5c\u4e3a <code>coachId</code> \u5217\u5b58\u50a8\u5728 <code>Team</code> \u6a21\u578b\u4e2d\u3002 \u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u4e0d\u540c\u79cd\u7c7b\u76841\uff1a1\u5173\u7cfb\uff0c\u56e0\u4e3a\u5916\u952e\u5173\u7cfb\u6bcf\u6b21\u51fa\u73b0\u5728\u4e0d\u540c\u7684\u6a21\u578b\u4e0a\u3002</p> <p>\u5f53\u5173\u4e8e\u5173\u8054\u7684\u4fe1\u606f\u5b58\u5728\u4e8e <strong>source</strong> \u6a21\u578b\u4e2d\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>belongsTo</code>\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>Player</code> \u9002\u7528\u4e8e <code>belongsTo</code>\uff0c\u56e0\u4e3a\u5b83\u5177\u6709 <code>teamId</code> \u5217\u3002</p> <pre><code class="language-js">Player.belongsTo(Team)  // `teamId` \u5c06\u88ab\u6dfb\u52a0\u5230 Player / Source \u6a21\u578b\u4e2d</code></pre> <p>\u5f53\u5173\u4e8e\u5173\u8054\u7684\u4fe1\u606f\u5b58\u5728\u4e8e <strong>target</strong> \u6a21\u578b\u4e2d\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>hasOne</code>\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c <code>Coach</code> \u9002\u7528\u4e8e <code>hasOne</code> \uff0c\u56e0\u4e3a <code>Team</code> \u6a21\u578b\u5c06\u5176 <code>Coach</code> \u7684\u4fe1\u606f\u5b58\u50a8\u4e3a <code>coachId</code> \u5b57\u6bb5\u3002</p> <pre><code class="language-js">Coach.hasOne(Team)  // `coachId` \u5c06\u88ab\u6dfb\u52a0\u5230 Team / Target \u6a21\u578b\u4e2d</code></pre> <h2 id="\u4e00\u5bf9\u591a\u5173\u8054-hasmany">\u4e00\u5bf9\u591a\u5173\u8054 (hasMany)</h2> <p>\u4e00\u5bf9\u591a\u5173\u8054\u5c06\u4e00\u4e2a\u6765\u6e90\u4e0e\u591a\u4e2a\u76ee\u6807\u8fde\u63a5\u8d77\u6765\u3002 \u800c\u591a\u4e2a\u76ee\u6807\u63a5\u5230\u540c\u4e00\u4e2a\u7279\u5b9a\u7684\u6e90\u3002</p> <pre><code class="language-js">const User = sequelize.define(&#39;user&#39;, {/* ... */})\nconst Project = sequelize.define(&#39;project&#39;, {/* ... */})\n\n// \u597d\u3002 \u73b0\u5728\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff08\u5bf9\u7528\u6237\u6765\u8bf4\u5e76\u4e0d\u771f\u5b9e\u53ef\u89c1\uff09\u3002\n// \u9996\u5148\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a hasMany \u5173\u8054\nProject.hasMany(User, {as: &#39;Workers&#39;})</code></pre> <p>\u8fd9\u5c06\u6dfb\u52a0\u5c5e\u6027 <code>projectId</code> \u6216 <code>project_id</code> \u5230 User\u3002 Project \u7684\u5b9e\u4f8b\u5c06\u83b7\u5f97\u8bbf\u95ee\u5668 <code>getWorkers</code> \u548c <code>setWorkers</code>\u3002 </p> <p>\u6709\u65f6\u60a8\u53ef\u80fd\u9700\u8981\u5728\u4e0d\u540c\u7684\u5217\u4e0a\u5173\u8054\u8bb0\u5f55\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>sourceKey</code> \u9009\u9879\uff1a</p> <pre><code class="language-js">const City = sequelize.define(&#39;city&#39;, { countryCode: Sequelize.STRING });\nconst Country = sequelize.define(&#39;country&#39;, { isoCode: Sequelize.STRING });\n\n// \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u56fd\u5bb6\u4ee3\u7801\u8fde\u63a5\u56fd\u5bb6\u548c\u57ce\u5e02\nCountry.hasMany(City, {foreignKey: &#39;countryCode&#39;, sourceKey: &#39;isoCode&#39;});\nCity.belongsTo(Country, {foreignKey: &#39;countryCode&#39;, targetKey: &#39;isoCode&#39;});</code></pre> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u89e3\u51b3\u4e86\u5355\u5411\u5173\u8054\u3002 \u4f46\u6211\u4eec\u60f3\u8981\u66f4\u591a\uff01 \u8ba9\u6211\u4eec\u901a\u8fc7\u5728\u4e0b\u4e00\u8282\u4e2d\u521b\u5efa\u4e00\u4e2a\u591a\u5bf9\u591a\u7684\u5173\u8054\u6765\u5b9a\u4e49\u5b83\u3002</p> <h2 id="\u591a\u5bf9\u591a\u5173\u8054">\u591a\u5bf9\u591a\u5173\u8054</h2> <p>\u591a\u5bf9\u591a\u5173\u8054\u7528\u4e8e\u5c06\u6e90\u4e0e\u591a\u4e2a\u76ee\u6807\u76f8\u8fde\u63a5\u3002 \u6b64\u5916\uff0c\u76ee\u6807\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230\u591a\u4e2a\u6e90\u3002</p> <pre><code class="language-js">Project.belongsToMany(User, {through: &#39;UserProject&#39;});\nUser.belongsToMany(Project, {through: &#39;UserProject&#39;});</code></pre> <p>\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a UserProject \u7684\u65b0\u6a21\u578b\uff0c\u5177\u6709\u7b49\u6548\u7684\u5916\u952e<code>projectId</code>\u548c<code>userId</code>\u3002 \u5c5e\u6027\u662f\u5426\u4e3a<code>camelcase</code>\u53d6\u51b3\u4e8e\u7531\u8868\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e3a<code>User</code>\u548c<code>Project</code>\uff09\u8fde\u63a5\u7684\u4e24\u4e2a\u6a21\u578b\u3002</p> <p>\u5b9a\u4e49 <code>through</code> \u4e3a <strong>required</strong>\u3002 Sequelize \u4ee5\u524d\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u751f\u6210\u540d\u79f0\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u5bfc\u81f4\u6700\u5408\u4e4e\u903b\u8f91\u7684\u8bbe\u7f6e\u3002</p> <p>\u8fd9\u5c06\u6dfb\u52a0\u65b9\u6cd5 <code>getUsers</code>, <code>setUsers</code>, <code>addUser</code>,<code>addUsers</code> \u5230 <code>Project</code>, \u8fd8\u6709 <code>getProjects</code>, <code>setProjects</code>, <code>addProject</code>, \u548c <code>addProjects</code> \u5230 <code>User</code>.</p> <p>\u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u5173\u8054\u4e2d\u4f7f\u7528\u5b83\u4eec\u65f6\u91cd\u547d\u540d\u6a21\u578b\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u522b\u540d\uff08<code>as</code>\uff09\u9009\u9879\u5c06 users \u5b9a\u4e49\u4e3a workers \u800c projects \u5b9a\u4e49\u4e3at asks\u3002 \u6211\u4eec\u8fd8\u5c06\u624b\u52a8\u5b9a\u4e49\u8981\u4f7f\u7528\u7684\u5916\u952e\uff1a</p> <pre><code class="language-js">User.belongsToMany(Project, { as: &#39;Tasks&#39;, through: &#39;worker_tasks&#39;, foreignKey: &#39;userId&#39; })\nProject.belongsToMany(User, { as: &#39;Workers&#39;, through: &#39;worker_tasks&#39;, foreignKey: &#39;projectId&#39; })</code></pre> <p><code>foreignKey</code> \u5c06\u5141\u8bb8\u4f60\u5728 <strong>through</strong> \u5173\u7cfb\u4e2d\u8bbe\u7f6e <strong>source model</strong> \u952e\u3002</p> <p><code>otherKey</code> \u5c06\u5141\u8bb8\u4f60\u5728 <strong>through</strong> \u5173\u7cfb\u4e2d\u8bbe\u7f6e <strong>target model</strong> \u952e\u3002</p> <pre><code class="language-js">User.belongsToMany(Project, { as: &#39;Tasks&#39;, through: &#39;worker_tasks&#39;, foreignKey: &#39;userId&#39;, otherKey: &#39;projectId&#39;})</code></pre> <p>\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 belongsToMany \u5b9a\u4e49\u81ea\u6211\u5f15\u7528\uff1a</p> <pre><code class="language-js">Person.belongsToMany(Person, { as: &#39;Children&#39;, through: &#39;PersonChildren&#39; })\n// \u8fd9\u5c06\u521b\u5efa\u5b58\u50a8\u5bf9\u8c61\u7684 ID \u7684\u8868 PersonChildren\u3002\n</code></pre> <p>\u5982\u679c\u60a8\u60f3\u8981\u8fde\u63a5\u8868\u4e2d\u7684\u5176\u4ed6\u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u5728\u5b9a\u4e49\u5173\u8054\u4e4b\u524d\u4e3a\u8fde\u63a5\u8868\u5b9a\u4e49\u4e00\u4e2a\u6a21\u578b\uff0c\u7136\u540e\u518d\u8bf4\u660e\u5b83\u5e94\u8be5\u4f7f\u7528\u8be5\u6a21\u578b\u8fdb\u884c\u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5173\u8054\uff1a</p> <pre><code class="language-js">const User = sequelize.define(&#39;user&#39;, {})\nconst Project = sequelize.define(&#39;project&#39;, {})\nconst UserProjects = sequelize.define(&#39;userProjects&#39;, {\n    status: DataTypes.STRING\n})\n\nUser.belongsToMany(Project, { through: UserProjects })\nProject.belongsToMany(User, { through: UserProjects })</code></pre> <p>\u8981\u5411 user \u6dfb\u52a0\u4e00\u4e2a\u65b0 project \u5e76\u8bbe\u7f6e\u5176\u72b6\u6001\uff0c\u60a8\u53ef\u4ee5\u5c06\u989d\u5916\u7684 <code>options.through</code> \u4f20\u9012\u7ed9 setter\uff0c\u5176\u4e2d\u5305\u542b\u8fde\u63a5\u8868\u7684\u5c5e\u6027</p> <pre><code class="language-js">user.addProject(project, { through: { status: &#39;started&#39; }})</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5c06 projectId \u548c userId \u6dfb\u52a0\u5230 UserProjects \u8868\u4e2d\uff0c <em>\u5220\u9664\u4efb\u4f55\u5148\u524d\u5b9a\u4e49\u7684\u4e3b\u952e\u5c5e\u6027</em> - \u8868\u5c06\u7531\u4e24\u4e2a\u8868\u7684\u952e\u7684\u7ec4\u5408\u552f\u4e00\u6807\u8bc6\uff0c\u5e76\u4e14\u6ca1\u6709\u5176\u4ed6\u4e3b\u952e\u5217\u3002 \u8981\u5728 <code>UserProjects</code> \u6a21\u578b\u4e0a\u5f3a\u6dfb\u52a0\u4e00\u4e2a\u4e3b\u952e\uff0c\u60a8\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u5b83\u3002</p> <pre><code class="language-js">const UserProjects = sequelize.define(&#39;userProjects&#39;, {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  status: DataTypes.STRING\n})</code></pre> <p>\u4f7f\u7528\u591a\u5bf9\u591a\u4f60\u53ef\u4ee5\u57fa\u4e8e <strong>through</strong> \u5173\u7cfb\u67e5\u8be2\u5e76\u9009\u62e9\u7279\u5b9a\u5c5e\u6027\u3002 \u4f8b\u5982\u901a\u8fc7 <strong>through</strong> \u4f7f\u7528<code>findAll</code></p> <pre><code class="language-js">User.findAll({\n  include: [{\n    model: Project,\n    through: {\n      attributes: [&#39;createdAt&#39;, &#39;startedAt&#39;, &#39;finishedAt&#39;],\n      where: {completed: true}\n    }\n  }]\n});</code></pre> <h2 id="\u4f5c\u7528\u57df">\u4f5c\u7528\u57df</h2> <p>\u672c\u8282\u6d89\u53ca\u5173\u8054\u4f5c\u7528\u57df\u3002 \u6709\u5173\u5173\u8054\u4f5c\u7528\u57df\u4e0e\u76f8\u5173\u6a21\u578b\u4e0a\u7684\u4f5c\u7528\u57df\u7684\u5b9a\u4e49\uff0c\u8bf7\u53c2\u9605 <a href="/manual/tutorial/scopes.html">\u4f5c\u7528\u57df</a>\u3002</p> <p>\u5173\u8054\u4f5c\u7528\u57df\u5141\u8bb8\u60a8\u5728\u5173\u8054\u4e0a\u653e\u7f6e\u4e00\u4e2a\u4f5c\u7528\u57df(\u4e00\u5957 <code>get</code> \u548c <code>create</code> \u7684\u9ed8\u8ba4\u5c5e\u6027)\u3002\u4f5c\u7528\u57df\u53ef\u4ee5\u653e\u5728\u76f8\u5173\u8054\u7684\u6a21\u578b\uff08\u5173\u8054\u7684target\uff09\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8868\u4e0a\u7684 n:m \u5173\u7cfb\u3002</p> <h4 id="1m">1:m</h4> <p>\u5047\u8bbe\u6211\u4eec\u6709\u8868\u8bc4\u8bba\uff0c\u5e16\u5b50\u548c\u56fe\u50cf\u3002 \u4e00\u4e2a\u8bc4\u8bba\u53ef\u4ee5\u901a\u8fc7 <code>commentable_id</code> \u548c <code>commentable</code> \u5173\u8054\u5230\u4e00\u4e2a\u56fe\u50cf\u6216\u4e00\u4e2a\u5e16\u5b50 - \u6211\u4eec\u8bf4 Post \u548c Image \u662f <code>Commentable</code></p> <pre><code class="language-js">const Comment = this.sequelize.define(&#39;comment&#39;, {\n  title: Sequelize.STRING,\n  commentable: Sequelize.STRING,\n  commentable_id: Sequelize.INTEGER\n});\n\nComment.prototype.getItem = function(options) {\n  return this[&#39;get&#39; + this.get(&#39;commentable&#39;).substr(0, 1).toUpperCase() + this.get(&#39;commentable&#39;).substr(1)](options);\n};\n\nPost.hasMany(this.Comment, {\n  foreignKey: &#39;commentable_id&#39;,\n  constraints: false,\n  scope: {\n    commentable: &#39;post&#39;\n  }\n});\nComment.belongsTo(this.Post, {\n  foreignKey: &#39;commentable_id&#39;,\n  constraints: false,\n  as: &#39;post&#39;\n});\n\nImage.hasMany(this.Comment, {\n  foreignKey: &#39;commentable_id&#39;,\n  constraints: false,\n  scope: {\n    commentable: &#39;image&#39;\n  }\n});\nComment.belongsTo(this.Image, {\n  foreignKey: &#39;commentable_id&#39;,\n  constraints: false,\n  as: &#39;image&#39;\n});</code></pre> <p><code>constraints: false,</code> \u7981\u7528\u5f15\u7528\u7ea6\u675f - \u7531\u4e8e <code>commentable_id</code> \u5217\u5f15\u7528\u4e86\u51e0\u4e2a\u8868\uff0c\u6211\u4eec\u4e0d\u80fd\u6dfb\u52a0\u4e00\u4e2a <code>REFERENCES</code> \u7ea6\u675f\u3002 \u8bf7\u6ce8\u610f\uff0cImage - &gt; Comment \u548c Post - &gt; Comment \u5173\u7cfb\u5206\u522b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u7528\u57df\uff1a<code>commentable: &#39;image&#39;</code> \u548c <code>commentable: &#39;post&#39;</code>\u3002 \u4f7f\u7528\u5173\u8054\u529f\u80fd\u65f6\u81ea\u52a8\u5e94\u7528\u6b64\u4f5c\u7528\u57df\uff1a</p> <pre><code class="language-js">image.getComments()\nSELECT * FROM comments WHERE commentable_id = 42 AND commentable = &#39;image&#39;;\n\nimage.createComment({\n  title: &#39;Awesome!&#39;\n})\nINSERT INTO comments (title, commentable_id, commentable) VALUES (&#39;Awesome!&#39;, 42, &#39;image&#39;);\n\nimage.addComment(comment);\nUPDATE comments SET commentable_id = 42, commentable = &#39;image&#39;</code></pre> <p><code>Comment</code> \u4e0a\u7684 <code>getItem</code> \u4f5c\u7528\u51fd\u6570\u5b8c\u6210\u4e86\u56fe\u7247 - \u5b83\u53ea\u662f\u5c06<code>commentable</code>\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a<code>getImage</code>\u6216<code>getPost</code>\u7684\u4e00\u4e2a\u8c03\u7528\uff0c\u63d0\u4f9b\u4e00\u4e2a\u6ce8\u91ca\u662f\u5c5e\u4e8e\u4e00\u4e2a\u5e16\u5b50\u8fd8\u662f\u4e00\u4e2a\u56fe\u50cf\u7684\u62bd\u8c61\u6982\u5ff5\u3002\u60a8\u53ef\u4ee5\u5c06\u666e\u901a\u9009\u9879\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 <code>getItem(options)</code>\uff0c\u4ee5\u6307\u5b9a\u4efb\u4f55\u6761\u4ef6\u6216\u5305\u542b\u7684\u4f4d\u7f6e\u3002</p> <h4 id="nm">n:m</h4> <p>\u7ee7\u7eed\u591a\u6001\u6a21\u578b\u7684\u601d\u8def\uff0c\u8003\u8651\u4e00\u4e2a tag \u8868 - \u4e00\u4e2a item \u53ef\u4ee5\u6709\u591a\u4e2a tag\uff0c\u4e00\u4e2a tag \u53ef\u4ee5\u4e0e\u591a\u4e2a item \u76f8\u5173\u3002</p> <p>\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u8be5\u793a\u4f8b\u4ec5\u663e\u793a\u4e86 Post \u6a21\u578b\uff0c\u4f46\u5b9e\u9645\u4e0a Tag \u4e0e\u5176\u4ed6\u51e0\u4e2a\u6a21\u578b\u76f8\u5173\u3002</p> <pre><code class="language-js">const ItemTag = sequelize.define(&#39;item_tag&#39;, {\n  id : {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  tag_id: {\n    type: DataTypes.INTEGER,\n    unique: &#39;item_tag_taggable&#39;\n  },\n  taggable: {\n    type: DataTypes.STRING,\n    unique: &#39;item_tag_taggable&#39;\n  },\n  taggable_id: {\n    type: DataTypes.INTEGER,\n    unique: &#39;item_tag_taggable&#39;,\n    references: null\n  }\n});\nconst Tag = sequelize.define(&#39;tag&#39;, {\n  name: DataTypes.STRING\n});\n\nPost.belongsToMany(Tag, {\n  through: {\n    model: ItemTag,\n    unique: false,\n    scope: {\n      taggable: &#39;post&#39;\n    }\n  },\n  foreignKey: &#39;taggable_id&#39;,\n  constraints: false\n});\nTag.belongsToMany(Post, {\n  through: {\n    model: ItemTag,\n    unique: false\n  },\n  foreignKey: &#39;tag_id&#39;,\n  constraints: false\n});</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u4f5c\u7528\u57df\u5217\uff08<code>taggable</code>\uff09\u73b0\u5728\u5728 through \u6a21\u578b\uff08<code>ItemTag</code>\uff09\u4e0a\u3002</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u66f4\u5177\u9650\u5236\u6027\u7684\u5173\u8054\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u5e94\u7528through \u6a21\u578b\uff08<code>ItemTag</code>\uff09\u548c\u76ee\u6807\u6a21\u578b\uff08<code>Tag</code>\uff09\u7684\u4f5c\u7528\u57df\u6765\u83b7\u53d6\u6240\u6709\u6302\u8d77\u7684 tag\u3002</p> <pre><code class="language-js">Post.hasMany(Tag, {\n  through: {\n    model: ItemTag,\n    unique: false,\n    scope: {\n      taggable: &#39;post&#39;\n    }\n  },\n  scope: {\n    status: &#39;pending&#39;\n  },\n  as: &#39;pendingTags&#39;,\n  foreignKey: &#39;taggable_id&#39;,\n  constraints: false\n});\n\nPost.getPendingTags();</code></pre> <pre><code class="language-sql">SELECT `tag`.*  INNER JOIN `item_tags` AS `item_tag`\nON `tag`.`id` = `item_tag`.`tagId`\n  AND `item_tag`.`taggable_id` = 42\n  AND `item_tag`.`taggable` = &#39;post&#39;\nWHERE (`tag`.`status` = &#39;pending&#39;);</code></pre> <p><code>constraints: false</code> \u7981\u7528 <code>taggable_id</code> \u5217\u4e0a\u7684\u5f15\u7528\u7ea6\u675f\u3002 \u56e0\u4e3a\u5217\u662f\u591a\u6001\u7684\uff0c\u6211\u4eec\u4e0d\u80fd\u8bf4\u5b83\u662f <code>REFERENCES</code> \u4e00\u4e2a\u7279\u5b9a\u7684\u8868\u3002</p> <h2 id="\u547d\u540d\u7b56\u7565">\u547d\u540d\u7b56\u7565</h2> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSequelize\u5c06\u4f7f\u7528\u6a21\u578b\u540d\u79f0\uff08\u4f20\u9012\u7ed9<code>sequelize.define</code>\u7684\u540d\u79f0\uff09\uff0c\u4ee5\u4fbf\u5728\u5173\u8054\u65f6\u4f7f\u7528\u6a21\u578b\u540d\u79f0\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u540d\u4e3a<code>user</code>\u7684\u6a21\u578b\u4f1a\u5c06\u5173\u8054\u6a21\u578b\u7684\u5b9e\u4f8b\u4e2d\u7684<code>get / set / add User</code>\u51fd\u6570\u548c\u52a0\u5165\u4e00\u4e2a\u540d\u4e3a<code>.user</code>\u7684\u5c5e\u6027\uff0c\u800c\u4e00\u4e2a\u540d\u4e3a<code>User</code>\u7684\u6a21\u578b\u4f1a\u6dfb\u52a0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u548c\u4e00\u4e2a\u540d\u4e3a<code>.User</code>\u7684\u5c5e\u6027\uff08\u6ce8\u610f\u5927\u5199U\uff09\u3002</p> <p>\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>as</code>\u6765\u5173\u8054\u6a21\u578b\u3002 \u5728\u5355\u4e2a\u5173\u8054\uff08has one \u548c belongs to\uff09\uff0c\u522b\u540d\u5e94\u8be5\u662f\u5355\u6570\uff0c\u800c\u5bf9\u4e8e\u8bb8\u591a\u5173\u8054\uff08has many\uff09\u5b83\u5e94\u8be5\u662f\u590d\u6570\u3002 Sequelize\u7136\u540e\u4f7f\u7528[inflection] <a href="https://www.npmjs.org/package/inflection">0</a>\u5e93\u5c06\u522b\u540d\u8f6c\u6362\u4e3a\u5176\u5355\u6570\u5f62\u5f0f\u3002 \u4f46\u662f\uff0c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u9002\u7528\u4e8e\u4e0d\u89c4\u5219\u6216\u975e\u82f1\u8bed\u5355\u8bcd\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u63d0\u4f9b\u590d\u6570\u548c\u5355\u6570\u5f62\u5f0f\u7684\u522b\u540d\uff1a</p> <pre><code class="language-js">User.belongsToMany(Project, { as: { singular: &#39;task&#39;, plural: &#39;tasks&#39; }})\n// Notice that inflection has no problem singularizing tasks, this is just for illustrative purposes.</code></pre> <p>\u5982\u679c\u4f60\u77e5\u9053\u6a21\u578b\u5c06\u59cb\u7ec8\u5728\u5173\u8054\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u522b\u540d\uff0c\u5219\u53ef\u4ee5\u5728\u521b\u5efa\u6a21\u578b\u65f6\u63d0\u4f9b\u5b83</p> <pre><code class="language-js">const Project = sequelize.define(&#39;project&#39;, attributes, {\n  name: {\n    singular: &#39;task&#39;,\n    plural: &#39;tasks&#39;,\n  }\n})\n\nUser.belongsToMany(Project);</code></pre> <p>\u8fd9\u5c06\u4e3a\u7528\u6237\u5b9e\u4f8b\u6dfb\u52a0 <code>add/set/get Tasks</code> \u65b9\u6cd5\u3002</p> <p>\u8bb0\u4f4f\uff0c\u4f7f\u7528<code>as</code>\u6765\u66f4\u6539\u5173\u8054\u7684\u540d\u79f0\u4e5f\u4f1a\u6539\u53d8\u5916\u952e\u7684\u540d\u79f0\u3002 \u5f53\u4f7f\u7528<code>as</code>\u65f6\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5916\u952e\u662f\u6700\u5b89\u5168\u7684\u3002</p> <pre><code class="language-js">Invoice.belongsTo(Subscription)\nSubscription.hasMany(Invoice)</code></pre> <p>\u4e0d\u4f7f\u7528 <code>as</code>\uff0c\u8fd9\u4f1a\u6309\u9884\u671f\u6dfb\u52a0 <code>subscriptionId</code>\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u8981\u53d1\u9001<code>Invoice.belongsTo(Subscription, { as: &#39;TheSubscription&#39; })</code>\uff0c\u90a3\u4e48\u60a8\u5c06\u540c\u65f6\u62e5\u6709 <code>subscriptionId</code> \u548c <code>theSubscriptionId</code>\uff0c\u56e0\u4e3a sequelize \u4e0d\u591f\u806a\u660e\uff0c\u65e0\u6cd5\u786e\u5b9a\u8c03\u7528\u662f\u76f8\u540c\u5173\u7cfb\u7684\u4e24\u9762\u3002 <code>foreignKey</code> \u4fee\u6b63\u4e86\u8fd9\u4e2a\u95ee\u9898;</p> <pre><code class="language-js">Invoice.belongsTo(Subscription, , { as: &#39;TheSubscription&#39;, foreignKey: &#39;subscription_id&#39; })\nSubscription.hasMany(Invoice, { foreignKey: &#39;subscription_id&#39; )</code></pre> <h2 id="\u5173\u8054\u5bf9\u8c61">\u5173\u8054\u5bf9\u8c61</h2> <p>\u56e0\u4e3a Sequelize \u505a\u4e86\u5f88\u591a\u795e\u5947\u7684\u4e8b\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u5728\u8bbe\u7f6e\u5173\u8054\u540e\u8c03\u7528 <code>Sequelize.sync</code>\u3002 \u8fd9\u6837\u505a\u5c06\u5141\u8bb8\u60a8\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <pre><code class="language-js">Project.hasMany(Task)\nTask.belongsTo(Project)\n\nProject.create()...\nTask.create()...\nTask.create()...\n\n// \u4fdd\u5b58\u5b83\u4eec.. \u7136\u540e:\nproject.setTasks([task1, task2]).then(() =&gt; {\n  // \u5df2\u4fdd\u5b58!\n})\n\n// \u597d\u7684\uff0c\u73b0\u5728\u5b83\u4eec\u5df2\u7ecf\u4fdd\u5b58\u4e86...\u6211\u600e\u4e48\u624d\u80fd\u5f97\u5230\u4ed6\u4eec\uff1f\nproject.getTasks().then(associatedTasks =&gt; {\n  // associatedTasks \u662f\u4e00\u4e2a tasks \u7684\u6570\u7ec4\n})\n\n// \u60a8\u8fd8\u53ef\u4ee5\u5c06\u8fc7\u6ee4\u5668\u4f20\u9012\u7ed9getter\u65b9\u6cd5\u3002\n// \u5b83\u4eec\u4e0e\u4f60\u80fd\u4f20\u9012\u7ed9\u5e38\u89c4\u67e5\u627e\u5668\u65b9\u6cd5\u7684\u9009\u9879\u76f8\u540c\u3002\nproject.getTasks({ where: &#39;id &gt; 10&#39; }).then(tasks =&gt; {\n  // id\u5927\u4e8e10\u7684\u4efb\u52a1\n})\n\n// \u4f60\u4e5f\u53ef\u4ee5\u4ec5\u68c0\u7d22\u5173\u8054\u5bf9\u8c61\u7684\u67d0\u4e9b\u5b57\u6bb5\u3002\nproject.getTasks({attributes: [&#39;title&#39;]}).then(tasks =&gt; {\n  // \u4f7f\u7528\u5c5e\u6027\u201ctitle\u201d\u548c\u201cid\u201d\u68c0\u7d22\u4efb\u52a1\n})</code></pre> <p>\u8981\u5220\u9664\u521b\u5efa\u7684\u5173\u8054\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528set\u65b9\u6cd5\u800c\u4e0d\u4f7f\u7528\u7279\u5b9a\u7684ID\uff1a</p> <pre><code class="language-js">// \u5220\u9664\u4e0e task1 \u7684\u5173\u8054\nproject.setTasks([task2]).then(associatedTasks =&gt; {\n  // \u4f60\u5c06\u53ea\u5f97\u5230 task2\n})\n\n// \u5220\u9664\u5168\u90e8\nproject.setTasks([]).then(associatedTasks =&gt; {\n  // \u4f60\u5c06\u5f97\u5230\u7a7a\u6570\u7ec4\n})\n\n// \u6216\u66f4\u76f4\u63a5\u5730\u5220\u9664\nproject.removeTask(task1).then(() =&gt; {\n  // \u4ec0\u4e48\u90fd\u6ca1\u6709\n})\n\n// \u7136\u540e\u518d\u6b21\u6dfb\u52a0\u5b83\u4eec\nproject.addTask(task1).then(function() {\n  // \u5b83\u4eec\u53c8\u56de\u6765\u4e86\n})</code></pre> <p>\u53cd\u4e4b\u4ea6\u7136\u4f60\u5f53\u7136\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <pre><code class="language-js">// project\u4e0etask1\u548ctask2\u76f8\u5173\u8054\ntask2.setProject(null).then(function() {\n  // \u4ec0\u4e48\u90fd\u6ca1\u6709\n})</code></pre> <p>\u5bf9\u4e8e hasOne/belongsTo \u4e0e\u5176\u57fa\u672c\u76f8\u540c:</p> <pre><code class="language-js">Task.hasOne(User, {as: &quot;Author&quot;})\nTask.setAuthor(anAuthor)</code></pre> <p>\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u6dfb\u52a0\u4e0e\u81ea\u5b9a\u4e49\u8fde\u63a5\u8868\u7684\u5173\u7cfb\u7684\u5173\u8054\uff08\u7ee7\u7eed\u524d\u4e00\u7ae0\u4e2d\u5b9a\u4e49\u7684\u5173\u8054\uff09\uff1a</p> <pre><code class="language-js">// \u5728\u521b\u5efa\u5173\u8054\u4e4b\u524d\uff0c\u901a\u8fc7\u5411\u5bf9\u8c61\u6dfb\u52a0\u5177\u6709\u8fde\u63a5\u8868\u6a21\u578b\u540d\u79f0\u7684\u5c5e\u6027\nproject.UserProjects = {\n  status: &#39;active&#39;\n}\nu.addProject(project)\n\n// \u6216\u8005\u5728\u6dfb\u52a0\u5173\u8054\u65f6\u63d0\u4f9b\u7b2c\u4e8c\u4e2aoptions.through\u53c2\u6570\uff0c\u5176\u4e2d\u5305\u542b\u5e94\u8be5\u5728\u8fde\u63a5\u8868\u4e2d\u7684\u6570\u636e\nu.addProject(project, { through: { status: &#39;active&#39; }})\n\n\n// \u5173\u8054\u591a\u4e2a\u5bf9\u8c61\u65f6\uff0c\u53ef\u4ee5\u7ec4\u5408\u4e0a\u8ff0\u4e24\u4e2a\u9009\u9879\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7b2c\u4e8c\u4e2a\u53c2\u6570\n// \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u4f7f\u7528\u7684\u6570\u636e\u5c06\u88ab\u89c6\u4e3a\u9ed8\u8ba4\u5bf9\u8c61\nproject1.UserProjects = {\n    status: &#39;inactive&#39;\n}\n\nu.setProjects([project1, project2], { through: { status: &#39;active&#39; }})\n// \u4e0a\u8ff0\u4ee3\u7801\u5c06\u5bf9\u9879\u76ee1\u8bb0\u5f55\u65e0\u6548\uff0c\u5e76\u4e14\u5728\u8fde\u63a5\u8868\u4e2d\u5bf9\u9879\u76ee2\u8fdb\u884cactive</code></pre> <p>\u5f53\u83b7\u53d6\u5177\u6709\u81ea\u5b9a\u4e49\u8fde\u63a5\u8868\u7684\u5173\u8054\u7684\u6570\u636e\u65f6\uff0c\u8fde\u63a5\u8868\u4e2d\u7684\u6570\u636e\u5c06\u4f5c\u4e3aDAO\u5b9e\u4f8b\u8fd4\u56de\uff1a</p> <pre><code class="language-js">u.getProjects().then(projects =&gt; {\n  const project = projects[0]\n\n  if (project.UserProjects.status === &#39;active&#39;) {\n    // .. \u505a\u70b9\u4ec0\u4e48\n\n    // \u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684DAO\u5b9e\u4f8b\uff0c\u60a8\u53ef\u4ee5\u5728\u5b8c\u6210\u64cd\u4f5c\u4e4b\u540e\u76f4\u63a5\u4fdd\u5b58\u5b83\n    return project.UserProjects.save()\n  }\n})</code></pre> <p>\u5982\u679c\u60a8\u4ec5\u9700\u8981\u8fde\u63a5\u8868\u4e2d\u7684\u67d0\u4e9b\u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u63d0\u4f9b\u5177\u6709\u6240\u9700\u5c5e\u6027\u7684\u6570\u7ec4\uff1a</p> <pre><code class="language-js">// \u8fd9\u5c06\u4ec5\u4ece Projects \u8868\u4e2d\u9009\u62e9 name\uff0c\u4ec5\u4ece UserProjects \u8868\u4e2d\u9009\u62e9status\nuser.getProjects({ attributes: [&#39;name&#39;], joinTableAttributes: [&#39;status&#39;]})</code></pre> <h2 id="\u68c0\u67e5\u5173\u8054">\u68c0\u67e5\u5173\u8054</h2> <p>\u60a8\u8fd8\u53ef\u4ee5\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u5df2\u7ecf\u4e0e\u53e6\u4e00\u4e2a\u5bf9\u8c61\u76f8\u5173\u8054\uff08\u4ec5 n:m\uff09\u3002 \u8fd9\u662f\u4f60\u600e\u4e48\u505a\u7684</p> <pre><code class="language-js">// \u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u662f\u5173\u8054\u5bf9\u8c61\u4e4b\u4e00\uff1a\nProject.create({ /* */ }).then(project =&gt; {\n  return User.create({ /* */ }).then(user =&gt; {\n    return project.hasUser(user).then(result =&gt; {\n      // \u7ed3\u679c\u662f false\n      return project.addUser(user).then(() =&gt; {\n        return project.hasUser(user).then(result =&gt; {\n          // \u7ed3\u679c\u662f true\n        })\n      })\n    })\n  })\n})\n\n// \u68c0\u67e5\u6240\u6709\u5173\u8054\u7684\u5bf9\u8c61\u662f\u5426\u5982\u9884\u671f\u7684\u90a3\u6837\uff1a\n// \u6211\u4eec\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u4e2a\u9879\u76ee\u548c\u4e24\u4e2a\u7528\u6237\nproject.setUsers([user1, user2]).then(() =&gt; {\n  return project.hasUsers([user1]);\n}).then(result =&gt; {\n  // \u7ed3\u679c\u662f true\n  return project.hasUsers([user1, user2]);\n}).then(result =&gt; {\n  // \u7ed3\u679c\u662f true\n})</code></pre> <h2 id="\u5916\u952e-1">\u5916\u952e</h2> <p>\u5f53\u60a8\u5728sequelize\u6a21\u578b\u4e2d\u521b\u5efa\u5173\u8054\u65f6\uff0c\u5c06\u81ea\u52a8\u521b\u5efa\u5177\u6709\u7ea6\u675f\u7684\u5916\u952e\u5f15\u7528\u3002 \u8bbe\u7f6e\u5982\u4e0b\uff1a</p> <pre><code class="language-js">const Task = this.sequelize.define(&#39;task&#39;, { title: Sequelize.STRING })\nconst User = this.sequelize.define(&#39;user&#39;, { username: Sequelize.STRING })\n\nUser.hasMany(Task)\nTask.belongsTo(User)</code></pre> <p>\u5c06\u751f\u6210\u4ee5\u4e0bSQL\uff1a</p> <pre><code class="language-sql">CREATE TABLE IF NOT EXISTS `User` (\n  `id` INTEGER PRIMARY KEY,\n  `username` VARCHAR(255)\n);\n\nCREATE TABLE IF NOT EXISTS `Task` (\n  `id` INTEGER PRIMARY KEY,\n  `title` VARCHAR(255),\n  `user_id` INTEGER REFERENCES `User` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\n);</code></pre> <p>\u5728task\u548cuser\u7684\u5173\u7cfb\u4e4b \u4e2d\u5728task\u4e0a\u6ce8\u5165<code>user_id</code>\u5916\u952e\uff0c\u5e76\u5c06\u5176\u6807\u8bb0\u4e3a<code>User</code>\u8868\u7684\u5f15\u7528\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5f15\u7528\u7684\u7528\u6237\u88ab\u5220\u9664\uff0c<code>user_id</code>\u5c06\u88ab\u8bbe\u7f6e\u4e3a<code>NULL</code>\uff0c\u5982\u679c\u66f4\u65b0\u4e86\u7528\u6237\u6807\u8bc6\u7684id\uff0c\u5219\u4f1a\u88ab\u66f4\u65b0\u3002\u901a\u8fc7\u5c06<code>onUpdate</code>\u548c<code>onDelete</code>\u9009\u9879\u4f20\u9012\u7ed9\u5173\u8054\u8c03\u7528\uff0c\u53ef\u4ee5\u8986\u76d6\u8fd9\u4e9b\u9009\u9879\u3002\u9a8c\u8bc1\u9009\u9879\u4e3a<code>RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL</code>\u3002</p> <p>\u5bf9\u4e8e1:1\u548c1:m\u5173\u8054\uff0c\u9ed8\u8ba4\u9009\u9879\u4e3a<code>SET NULL</code>\u7528\u4e8e\u5220\u9664\uff0c <code>CASCADE</code>\u7528\u4e8e\u66f4\u65b0\u3002\u5bf9\u4e8en:m\uff0c\u4e24\u8005\u7684\u9ed8\u8ba4\u503c\u4e3a<code>CASCADE</code>\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4ecen:m\u5173\u8054\u7684\u4e00\u4fa7\u5220\u9664\u6216\u66f4\u65b0\u884c\uff0c\u5f15\u7528\u8be5\u884c\u7684\u8fde\u63a5\u8868\u4e2d\u7684\u6240\u6709\u884c\u4e5f\u5c06\u88ab\u5220\u9664\u6216\u66f4\u65b0\u3002</p> <p>\u5728\u8868\u4e4b\u95f4\u6dfb\u52a0\u7ea6\u675f\u610f\u5473\u7740\u5728\u4f7f\u7528<code>sequelize.sync</code>\u65f6\uff0c\u5fc5\u987b\u4ee5\u7279\u5b9a\u987a\u5e8f\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u3002\u5982\u679c<code>Task</code>\u5f15\u7528\u4e86<code>User</code>\uff0c\u5219\u5fc5\u987b\u5148\u521b\u5efa<code>User</code>\u8868\uff0c\u7136\u540e\u624d\u80fd\u521b\u5efa<code>Task</code>\u8868\u3002\u8fd9\u6709\u65f6\u53ef\u80fd\u5bfc\u81f4\u5faa\u73af\u5f15\u7528\uff0c\u5176\u4e2d\u540e\u9057\u75c7\u627e\u4e0d\u5230\u8981\u540c\u6b65\u7684\u987a\u5e8f\u3002\u60f3\u8c61\u4e00\u4e0b\u6587\u4ef6\u548c\u7248\u672c\u7684\u573a\u666f\u3002\u4e00\u4e2a\u6587\u6863\u53ef\u4ee5\u6709\u591a\u4e2a\u7248\u672c\uff0c\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e00\u4e2a\u6587\u6863\u53ef\u4ee5\u5f15\u7528\u5b83\u7684\u5f53\u524d\u7248\u672c\u3002</p> <pre><code class="language-js">const Document = this.sequelize.define(&#39;document&#39;, {\n  author: Sequelize.STRING\n})\nconst Version = this.sequelize.define(&#39;version&#39;, {\n  timestamp: Sequelize.DATE\n})\n\nDocument.hasMany(Version) // \u8fd9\u5c06 document_id \u6dfb\u52a0\u5230\u7248\u672c\nDocument.belongsTo(Version, { as: &#39;Current&#39;, foreignKey: &#39;current_version_id&#39;}) // \u8fd9\u5c06current_version_id\u6dfb\u52a0\u5230\u6587\u6863</code></pre> <p>\u4f46\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u5bfc\u81f4\u4ee5\u4e0b\u9519\u8bef\uff1a <code>Cyclic dependency found. &#39;Document&#39; is dependent of itself. Dependency Chain: Document -&gt; Version =&gt; Document</code>. \u4e3a\u4e86\u51cf\u8f7b\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 <code>constraints: false</code> \u4f20\u9012\u7ed9\u5176\u4e2d\u4e00\u4e2a\u5173\u8054\uff1a</p> <pre><code class="language-js">Document.hasMany(Version)\nDocument.belongsTo(Version, { as: &#39;Current&#39;, foreignKey: &#39;current_version_id&#39;, constraints: false})</code></pre> <p>\u8fd9\u5c06\u5141\u8bb8\u6211\u4eec\u6b63\u786e\u5730\u540c\u6b65\u8868\uff1a</p> <pre><code class="language-sql">CREATE TABLE IF NOT EXISTS `Document` (\n  `id` INTEGER PRIMARY KEY,\n  `author` VARCHAR(255),\n  `current_version_id` INTEGER\n);\nCREATE TABLE IF NOT EXISTS `Version` (\n  `id` INTEGER PRIMARY KEY,\n  `timestamp` DATETIME,\n  `document_id` INTEGER REFERENCES `Document` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\n);</code></pre> <h3 id="\u5f3a\u5236\u6267\u884c\u5916\u952e\u5f15\u7528\u800c\u4e0d\u53d7\u7ea6\u675f">\u5f3a\u5236\u6267\u884c\u5916\u952e\u5f15\u7528\u800c\u4e0d\u53d7\u7ea6\u675f</h3> <p>\u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5f15\u7528\u53e6\u4e00\u4e2a\u8868\uff0c\u800c\u4e0d\u6dfb\u52a0\u4efb\u4f55\u7ea6\u675f\u6216\u5173\u8054\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u624b\u52a8\u5c06\u5f15\u7528\u5c5e\u6027\u6dfb\u52a0\u5230\u6a21\u5f0f\u5b9a\u4e49\uff0c\u5e76\u6807\u8bb0\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> <pre><code class="language-js">// \u5728\u6211\u4eec\u8c03\u7528 Trainer.hasMany(series) \u4e4b\u540e Series \u6709\u4e00\u4e2a \u5916\u53c2\u8003\u952e trainer_id=Trainer.id \nconst Series = sequelize.define(&#39;series&#39;, {\n  title:        DataTypes.STRING,\n  sub_title:    DataTypes.STRING,\n  description:  DataTypes.TEXT,\n\n  // \u7528 `Trainer` \u8bbe\u7f6e\u5916\u952e\u5173\u7cfb(hasMany) \n  trainer_id: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: &quot;trainer&quot;,\n      key: &quot;id&quot;\n    }\n  }\n})\n\nconst Trainer = sequelize.define(&#39;trainer&#39;, {\n  first_name: DataTypes.STRING,\n  last_name:  DataTypes.STRING\n});\n\n// \u5728\u6211\u4eec\u8c03\u7528 Series.hasOne(Video) \u4e4b\u540e Video \u6709\u4e00\u4e2a \u5916\u53c2\u8003\u952e series_id=Series.id\nconst Video = sequelize.define(&#39;video&#39;, {\n  title:        DataTypes.STRING,\n  sequence:     DataTypes.INTEGER,\n  description:  DataTypes.TEXT,\n\n  // \u7528 `Series` \u8bbe\u7f6e\u5173\u7cfb(hasOne) \n  series_id: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Series, // \u53ef\u4ee5\u662f\u8868\u793a\u8868\u540d\u79f0\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5bf9\u6a21\u578b\u7684\u5f15\u7528\n      key:   &quot;id&quot;\n    }\n  }\n});\n\nSeries.hasOne(Video);\nTrainer.hasMany(Series);</code></pre> <h2 id="\u7528\u5173\u8054\u521b\u5efa">\u7528\u5173\u8054\u521b\u5efa</h2> <p>\u5982\u679c\u6240\u6709\u5143\u7d20\u90fd\u662f\u65b0\u7684\uff0c\u5219\u53ef\u4ee5\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u521b\u5efa\u5177\u6709\u5d4c\u5957\u5173\u8054\u7684\u5b9e\u4f8b\u3002</p> <h3 id="\u521b\u5efa\u4e00\u4e2a-belongsto-has-many-\u6216-hasone-\u5173\u8054\u7684\u5143\u7d20">\u521b\u5efa\u4e00\u4e2a &quot;BelongsTo&quot;, &quot;Has Many&quot; \u6216 &quot;HasOne&quot; \u5173\u8054\u7684\u5143\u7d20</h3> <p>\u8003\u8651\u4ee5\u4e0b\u6a21\u578b\uff1a</p> <pre><code class="language-js">const Product = this.sequelize.define(&#39;product&#39;, {\n  title: Sequelize.STRING\n});\nconst User = this.sequelize.define(&#39;user&#39;, {\n  first_name: Sequelize.STRING,\n  last_name: Sequelize.STRING\n});\nconst Address = this.sequelize.define(&#39;address&#39;, {\n  type: Sequelize.STRING,\n  line_1: Sequelize.STRING,\n  line_2: Sequelize.STRING,\n  city: Sequelize.STRING,\n  state: Sequelize.STRING,\n  zip: Sequelize.STRING,\n});\n\nProduct.User = Product.belongsTo(User);\nUser.Addresses = User.hasMany(Address);\n// \u4e5f\u80fd\u7528\u4e8e `hasOne`</code></pre> <p>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684<code>Product</code>, <code>User</code>\u548c\u4e00\u4e2a\u6216\u591a\u4e2a<code>Address</code>: </p> <pre><code class="language-js">return Product.create({\n  title: &#39;Chair&#39;,\n  user: {\n    first_name: &#39;Mick&#39;,\n    last_name: &#39;Broadstone&#39;,\n    addresses: [{\n      type: &#39;home&#39;,\n      line_1: &#39;100 Main St.&#39;,\n      city: &#39;Austin&#39;,\n      state: &#39;TX&#39;,\n      zip: &#39;78704&#39;\n    }]\n  }\n}, {\n  include: [{\n    association: Product.User,\n    include: [ User.Addresses ]\n  }]\n});</code></pre> <p>\u8fd9\u91cc\uff0c\u6211\u4eec\u7684\u7528\u6237\u6a21\u578b\u79f0\u4e3a<code>user</code>\uff0c\u5e26\u5c0f\u5199u - \u8fd9\u610f\u5473\u7740\u5bf9\u8c61\u4e2d\u7684\u5c5e\u6027\u4e5f\u5e94\u8be5\u662f<code>user</code>\u3002 \u5982\u679c\u7ed9<code>sequelize.define</code>\u6307\u5b9a\u7684\u540d\u79f0\u4e3a<code>User</code>\uff0c\u5bf9\u8c61\u4e2d\u7684\u952e\u4e5f\u5e94\u4e3a<code>User</code>\u3002 \u5bf9\u4e8e<code>addresses</code>\u4e5f\u662f\u540c\u6837\u7684\uff0c\u9664\u4e86\u5b83\u662f\u4e00\u4e2a <code>hasMany</code> \u5173\u8054\u7684\u590d\u6570\u3002</p> <h3 id="\u7528\u522b\u540d\u521b\u5efa\u4e00\u4e2a-belongsto-\u5173\u8054\u7684\u5143\u7d20">\u7528\u522b\u540d\u521b\u5efa\u4e00\u4e2a \u201cBelongsTo\u201d \u5173\u8054\u7684\u5143\u7d20</h3> <p>\u53ef\u4ee5\u5c06\u524d\u9762\u7684\u793a\u4f8b\u6269\u5c55\u4e3a\u652f\u6301\u5173\u8054\u522b\u540d\u3002</p> <pre><code class="language-js">const Creator = Product.belongsTo(User, {as: &#39;creator&#39;});\n\nreturn Product.create({\n  title: &#39;Chair&#39;,\n  creator: {\n    first_name: &#39;Matt&#39;,\n    last_name: &#39;Hansen&#39;\n  }\n}, {\n  include: [ Creator ]\n});</code></pre> <h3 id="\u521b\u5efa-hasmany-\u6216-belongstomany-\u5173\u8054\u7684\u5143\u7d20">\u521b\u5efa \u201cHasMany\u201d \u6216 \u201cBelongsToMany\u201d \u5173\u8054\u7684\u5143\u7d20</h3> <p>\u6211\u4eec\u6765\u4ecb\u7ecd\u5c06\u4ea7\u54c1\u4e0e\u8bb8\u591a\u6807\u7b7e\u76f8\u5173\u8054\u7684\u529f\u80fd\u3002 \u8bbe\u7f6e\u6a21\u578b\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code class="language-js">const Tag = this.sequelize.define(&#39;tag&#39;, {\n  name: Sequelize.STRING\n});\n\nProduct.hasMany(Tag);\n// Also works for `belongsToMany`.</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\u5177\u6709\u591a\u4e2a\u6807\u7b7e\u7684\u4ea7\u54c1\uff1a</p> <pre><code class="language-js">Product.create({\n  id: 1,\n  title: &#39;Chair&#39;,\n  tags: [\n    { name: &#39;Alpha&#39;},\n    { name: &#39;Beta&#39;}\n  ]\n}, {\n  include: [ Tag ]\n})</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u6b64\u793a\u4f8b\u4ee5\u652f\u6301\u522b\u540d\uff1a</p> <pre><code class="language-js">const Categories = Product.hasMany(Tag, {as: &#39;categories&#39;});\n\nProduct.create({\n  id: 1,\n  title: &#39;Chair&#39;,\n  categories: [\n    {id: 1, name: &#39;Alpha&#39;},\n    {id: 2, name: &#39;Beta&#39;}\n  ]\n}, {\n  include: [{\n    model: Categories,\n    as: &#39;categories&#39;\n  }]\n})</code></pre> <hr> ';e.exports=s}}]);